ARM GAS  /tmp/ccGMsmZ9.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB130:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccGMsmZ9.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** /* USER CODE END PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PM */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  42:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  47:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** UART_HandleTypeDef huart2;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** uint8_t buf[3];
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** HAL_StatusTypeDef ret;
  55:Core/Src/main.c **** struct bno055_t imu;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** uint32_t adc_value;
  58:Core/Src/main.c **** double esc_speed = 0.0;
  59:Core/Src/main.c **** double esc_rpm;
  60:Core/Src/main.c **** double esc_output = 0.0;
  61:Core/Src/main.c **** double xout, yout;
  62:Core/Src/main.c **** uint8_t serial_output[60] = {0};
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** uint32_t rpm_length;
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* USER CODE END PV */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  69:Core/Src/main.c **** void SystemClock_Config(void);
  70:Core/Src/main.c **** static void MX_GPIO_Init(void);
  71:Core/Src/main.c **** static void MX_TIM1_Init(void);
  72:Core/Src/main.c **** static void MX_I2C1_Init(void);
  73:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  74:Core/Src/main.c **** static void MX_SPI1_Init(void);
  75:Core/Src/main.c **** static void MX_TIM2_Init(void);
  76:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* USER CODE END PFP */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  81:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* USER CODE END 0 */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /**
  86:Core/Src/main.c ****   * @brief  The application entry point.
  87:Core/Src/main.c ****   * @retval int
  88:Core/Src/main.c ****   */
ARM GAS  /tmp/ccGMsmZ9.s 			page 3


  89:Core/Src/main.c **** int main(void)
  90:Core/Src/main.c **** {
  91:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  92:Core/Src/main.c **** 	uint32_t t = 0;
  93:Core/Src/main.c **** 	volatile HAL_StatusTypeDef stat;
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END 1 */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 100:Core/Src/main.c ****   HAL_Init();
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE END Init */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* Configure the system clock */
 108:Core/Src/main.c ****   SystemClock_Config();
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* USER CODE END SysInit */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* Initialize all configured peripherals */
 115:Core/Src/main.c ****   MX_GPIO_Init();
 116:Core/Src/main.c ****   MX_TIM1_Init();
 117:Core/Src/main.c ****   MX_I2C1_Init();
 118:Core/Src/main.c ****   MX_USART2_UART_Init();
 119:Core/Src/main.c ****   MX_SPI1_Init();
 120:Core/Src/main.c ****   MX_TIM2_Init();
 121:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 122:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /*imu.bus_read = BNO055_I2C_bus_read;
 125:Core/Src/main.c ****   imu.bus_write = BNO055_I2C_bus_write;
 126:Core/Src/main.c ****   imu.delay_msec = BNO055_delay_msek;
 127:Core/Src/main.c ****   imu.dev_addr = BNO055_I2C_ADDR1;
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   bno055_init(&imu);
 130:Core/Src/main.c ****   bno055_set_power_mode(BNO055_POWER_MODE_NORMAL);
 131:Core/Src/main.c ****   bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS);
 132:Core/Src/main.c **** */
 133:Core/Src/main.c ****   struct bno055_euler_double_t orientation_data;
 134:Core/Src/main.c ****   /*while (bno055_convert_double_euler_hpr_deg(&orientation_data) != BNO055_SUCCESS) {
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   };*/
 137:Core/Src/main.c ****   /*
 138:Core/Src/main.c ****   float Kpp = 160.0;
 139:Core/Src/main.c ****   float Kip = 0;
 140:Core/Src/main.c ****   float Kdp = 80;
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   float Kpr = 160.0;
 143:Core/Src/main.c ****   float Kir = 0;
 144:Core/Src/main.c ****   float Kdr = 80;*/
 145:Core/Src/main.c ****   //these are just absolute values, you have to correct directions in pid.c
ARM GAS  /tmp/ccGMsmZ9.s 			page 4


 146:Core/Src/main.c ****   float Kpp = 110.0;
 147:Core/Src/main.c ****   float Kip = 0;
 148:Core/Src/main.c ****   float Kdp = 55;
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   float Kpr = 160.0;
 151:Core/Src/main.c ****   float Kir = 0;
 152:Core/Src/main.c ****   float Kdr = 80;
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   float Kpe = 1;
 155:Core/Src/main.c ****   float Kie = 0;
 156:Core/Src/main.c ****   float Kde = 0;
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   PID_TypeDef escPID;
 159:Core/Src/main.c ****   PID_TypeDef xPID;
 160:Core/Src/main.c ****   PID_TypeDef yPID;
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   double xSetpoint, ySetpoint;
 163:Core/Src/main.c ****   xSetpoint = orientation_data.p;
 164:Core/Src/main.c ****   ySetpoint = orientation_data.r;
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   PID(&xPID, &orientation_data.p, &xout, &xSetpoint, Kpp, Kip, Kdp, _PID_P_ON_E, _PID_CD_DIRECT);
 167:Core/Src/main.c ****   PID_SetMode(&xPID, _PID_MODE_AUTOMATIC);
 168:Core/Src/main.c ****   PID_SetSampleTime(&xPID, 10);
 169:Core/Src/main.c ****   PID_SetOutputLimits(&xPID, -10922.5, 10992.5);
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****   PID(&yPID, &orientation_data.r, &yout, &ySetpoint, Kpr, Kir, Kdr, _PID_P_ON_E, _PID_CD_DIRECT);
 172:Core/Src/main.c ****   PID_SetMode(&yPID, _PID_MODE_AUTOMATIC);
 173:Core/Src/main.c ****   PID_SetSampleTime(&yPID, 10);
 174:Core/Src/main.c ****   PID_SetOutputLimits(&yPID, -10922.5, 10922.5);
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   esc_speed = 0.3;
 177:Core/Src/main.c ****   PID(&escPID, &esc_rpm, &esc_output, &esc_speed, Kpe, Kie, Kde, _PID_P_ON_E, _PID_CD_DIRECT);
 178:Core/Src/main.c ****   PID_SetMode(&escPID, _PID_MODE_AUTOMATIC);
 179:Core/Src/main.c ****   PID_SetSampleTime(&escPID, 10);
 180:Core/Src/main.c ****   PID_SetOutputLimits(&escPID, 0.0, 1.0);
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim1);
 183:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 184:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 185:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
 186:Core/Src/main.c ****   //HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   t = HAL_GetTick();
 189:Core/Src/main.c ****   while (HAL_GetTick() - t < 3000) {
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   }
 192:Core/Src/main.c ****   /*
 193:Core/Src/main.c ****   for (int i = 0; i < 20; i++) {
 194:Core/Src/main.c ****     serial_input[i] = 0x00;
 195:Core/Src/main.c ****   }
 196:Core/Src/main.c ****   */
 197:Core/Src/main.c ****   esc_output = 0.3;
 198:Core/Src/main.c ****   t = HAL_GetTick();
 199:Core/Src/main.c ****   while (HAL_GetTick() - t < 500) {
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   }
 202:Core/Src/main.c ****   //HAL_UART_Receive_DMA(&huart2, serial_input, 1);
ARM GAS  /tmp/ccGMsmZ9.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE END 2 */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* Infinite loop */
 207:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 208:Core/Src/main.c ****   while (1)
 209:Core/Src/main.c ****   {
 210:Core/Src/main.c **** 	  while (bno055_convert_double_euler_hpr_deg(&orientation_data) != BNO055_SUCCESS) {
 211:Core/Src/main.c **** 
 212:Core/Src/main.c **** 	  };
 213:Core/Src/main.c **** 	  orientation_data.p = -fabs(orientation_data.p); // Fix pitch orientation
 214:Core/Src/main.c ****     esc_rpm = (1.0 / rpm_length) / 3000.0;
 215:Core/Src/main.c **** 
 216:Core/Src/main.c **** 	  HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 217:Core/Src/main.c **** 	  PID_Compute(&xPID);
 218:Core/Src/main.c **** 	  PID_Compute(&yPID);
 219:Core/Src/main.c ****     PID_Compute(&escPID);
 220:Core/Src/main.c ****     
 221:Core/Src/main.c ****     sprintf(serial_output, "%ld\r\n", rpm_length);
 222:Core/Src/main.c ****     stat = HAL_UART_Transmit(&huart2, serial_output, 60, 1000);
 223:Core/Src/main.c ****     
 224:Core/Src/main.c **** 	  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 225:Core/Src/main.c ****     
 226:Core/Src/main.c ****     /* USER CODE END WHILE */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 229:Core/Src/main.c ****   }
 230:Core/Src/main.c ****   /* USER CODE END 3 */
 231:Core/Src/main.c **** }
 232:Core/Src/main.c **** 
 233:Core/Src/main.c **** /**
 234:Core/Src/main.c ****   * @brief System Clock Configuration
 235:Core/Src/main.c ****   * @retval None
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c **** void SystemClock_Config(void)
 238:Core/Src/main.c **** {
 239:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 240:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 241:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 244:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 245:Core/Src/main.c ****   */
 246:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 247:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 248:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL11;
 252:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 253:Core/Src/main.c ****   {
 254:Core/Src/main.c ****     Error_Handler();
 255:Core/Src/main.c ****   }
 256:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 257:Core/Src/main.c ****   */
 258:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 259:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/ccGMsmZ9.s 			page 6


 260:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 261:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 262:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 263:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 266:Core/Src/main.c ****   {
 267:Core/Src/main.c ****     Error_Handler();
 268:Core/Src/main.c ****   }
 269:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 270:Core/Src/main.c ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 271:Core/Src/main.c ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 272:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c **** }
 277:Core/Src/main.c **** 
 278:Core/Src/main.c **** /**
 279:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 280:Core/Src/main.c ****   * @param None
 281:Core/Src/main.c ****   * @retval None
 282:Core/Src/main.c ****   */
 283:Core/Src/main.c **** static void MX_I2C1_Init(void)
 284:Core/Src/main.c **** {
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 291:Core/Src/main.c **** 
 292:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 293:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 294:Core/Src/main.c ****   hi2c1.Init.Timing = 0x2000090E;
 295:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 296:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 297:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 298:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 299:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 300:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 301:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 302:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 303:Core/Src/main.c ****   {
 304:Core/Src/main.c ****     Error_Handler();
 305:Core/Src/main.c ****   }
 306:Core/Src/main.c ****   /** Configure Analogue filter
 307:Core/Src/main.c ****   */
 308:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 309:Core/Src/main.c ****   {
 310:Core/Src/main.c ****     Error_Handler();
 311:Core/Src/main.c ****   }
 312:Core/Src/main.c ****   /** Configure Digital filter
 313:Core/Src/main.c ****   */
 314:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 315:Core/Src/main.c ****   {
 316:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccGMsmZ9.s 			page 7


 317:Core/Src/main.c ****   }
 318:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c **** }
 323:Core/Src/main.c **** 
 324:Core/Src/main.c **** /**
 325:Core/Src/main.c ****   * @brief SPI1 Initialization Function
 326:Core/Src/main.c ****   * @param None
 327:Core/Src/main.c ****   * @retval None
 328:Core/Src/main.c ****   */
 329:Core/Src/main.c **** static void MX_SPI1_Init(void)
 330:Core/Src/main.c **** {
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 0 */
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   /* USER CODE END SPI1_Init 0 */
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 1 */
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /* USER CODE END SPI1_Init 1 */
 339:Core/Src/main.c ****   /* SPI1 parameter configuration*/
 340:Core/Src/main.c ****   hspi1.Instance = SPI1;
 341:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 342:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 343:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 344:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 345:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 346:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 347:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 348:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 349:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 350:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 351:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 352:Core/Src/main.c ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 353:Core/Src/main.c ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 354:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 355:Core/Src/main.c ****   {
 356:Core/Src/main.c ****     Error_Handler();
 357:Core/Src/main.c ****   }
 358:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 2 */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /* USER CODE END SPI1_Init 2 */
 361:Core/Src/main.c **** 
 362:Core/Src/main.c **** }
 363:Core/Src/main.c **** 
 364:Core/Src/main.c **** /**
 365:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 366:Core/Src/main.c ****   * @param None
 367:Core/Src/main.c ****   * @retval None
 368:Core/Src/main.c ****   */
 369:Core/Src/main.c **** static void MX_TIM1_Init(void)
 370:Core/Src/main.c **** {
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 373:Core/Src/main.c **** 
ARM GAS  /tmp/ccGMsmZ9.s 			page 8


 374:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 377:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 378:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 379:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 384:Core/Src/main.c ****   htim1.Instance = TIM1;
 385:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 386:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 387:Core/Src/main.c ****   htim1.Init.Period = 65535;
 388:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 389:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 390:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 391:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****     Error_Handler();
 394:Core/Src/main.c ****   }
 395:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 396:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 397:Core/Src/main.c ****   {
 398:Core/Src/main.c ****     Error_Handler();
 399:Core/Src/main.c ****   }
 400:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 401:Core/Src/main.c ****   {
 402:Core/Src/main.c ****     Error_Handler();
 403:Core/Src/main.c ****   }
 404:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 405:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 406:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 407:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 408:Core/Src/main.c ****   {
 409:Core/Src/main.c ****     Error_Handler();
 410:Core/Src/main.c ****   }
 411:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 412:Core/Src/main.c ****   sConfigOC.Pulse = 0x5555;
 413:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 414:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 415:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 416:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 417:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 418:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 419:Core/Src/main.c ****   {
 420:Core/Src/main.c ****     Error_Handler();
 421:Core/Src/main.c ****   }
 422:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 423:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 424:Core/Src/main.c ****   {
 425:Core/Src/main.c ****     Error_Handler();
 426:Core/Src/main.c ****   }
 427:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 428:Core/Src/main.c ****   {
 429:Core/Src/main.c ****     Error_Handler();
 430:Core/Src/main.c ****   }
ARM GAS  /tmp/ccGMsmZ9.s 			page 9


 431:Core/Src/main.c ****   sConfigOC.Pulse = 0x5555;
 432:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 433:Core/Src/main.c ****   {
 434:Core/Src/main.c ****     Error_Handler();
 435:Core/Src/main.c ****   }
 436:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 437:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 438:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 439:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 440:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 441:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 442:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 443:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 444:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 445:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 446:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 447:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 448:Core/Src/main.c ****   {
 449:Core/Src/main.c ****     Error_Handler();
 450:Core/Src/main.c ****   }
 451:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 452:Core/Src/main.c **** 
 453:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 454:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** }
 457:Core/Src/main.c **** 
 458:Core/Src/main.c **** /**
 459:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 460:Core/Src/main.c ****   * @param None
 461:Core/Src/main.c ****   * @retval None
 462:Core/Src/main.c ****   */
 463:Core/Src/main.c **** static void MX_TIM2_Init(void)
 464:Core/Src/main.c **** {
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 471:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 472:Core/Src/main.c **** 
 473:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 476:Core/Src/main.c ****   htim2.Instance = TIM2;
 477:Core/Src/main.c ****   htim2.Init.Prescaler = 43;
 478:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 479:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 480:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 481:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 482:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 483:Core/Src/main.c ****   {
 484:Core/Src/main.c ****     Error_Handler();
 485:Core/Src/main.c ****   }
 486:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 487:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
ARM GAS  /tmp/ccGMsmZ9.s 			page 10


 488:Core/Src/main.c ****   {
 489:Core/Src/main.c ****     Error_Handler();
 490:Core/Src/main.c ****   }
 491:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 492:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 493:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 494:Core/Src/main.c ****   {
 495:Core/Src/main.c ****     Error_Handler();
 496:Core/Src/main.c ****   }
 497:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 500:Core/Src/main.c **** 
 501:Core/Src/main.c **** }
 502:Core/Src/main.c **** 
 503:Core/Src/main.c **** /**
 504:Core/Src/main.c ****   * @brief USART2 Initialization Function
 505:Core/Src/main.c ****   * @param None
 506:Core/Src/main.c ****   * @retval None
 507:Core/Src/main.c ****   */
 508:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 509:Core/Src/main.c **** {
 510:Core/Src/main.c **** 
 511:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 518:Core/Src/main.c ****   huart2.Instance = USART2;
 519:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 520:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 521:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 522:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 523:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 524:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 525:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 526:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 527:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 528:Core/Src/main.c ****   huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 529:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 530:Core/Src/main.c ****   {
 531:Core/Src/main.c ****     Error_Handler();
 532:Core/Src/main.c ****   }
 533:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 536:Core/Src/main.c **** 
 537:Core/Src/main.c **** }
 538:Core/Src/main.c **** 
 539:Core/Src/main.c **** /**
 540:Core/Src/main.c ****   * @brief GPIO Initialization Function
 541:Core/Src/main.c ****   * @param None
 542:Core/Src/main.c ****   * @retval None
 543:Core/Src/main.c ****   */
 544:Core/Src/main.c **** static void MX_GPIO_Init(void)
ARM GAS  /tmp/ccGMsmZ9.s 			page 11


 545:Core/Src/main.c **** {
  28              		.loc 1 545 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 89B0     		sub	sp, sp, #36
  40              		.cfi_def_cfa_offset 56
 546:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 546 3 view .LVU1
  42              		.loc 1 546 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0394     		str	r4, [sp, #12]
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
  48 000e 0794     		str	r4, [sp, #28]
 547:Core/Src/main.c **** 
 548:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 549:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  49              		.loc 1 549 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 549 3 view .LVU4
  52              		.loc 1 549 3 view .LVU5
  53 0010 1C4B     		ldr	r3, .L3
  54 0012 5A69     		ldr	r2, [r3, #20]
  55 0014 42F40032 		orr	r2, r2, #131072
  56 0018 5A61     		str	r2, [r3, #20]
  57              		.loc 1 549 3 view .LVU6
  58 001a 5A69     		ldr	r2, [r3, #20]
  59 001c 02F40032 		and	r2, r2, #131072
  60 0020 0192     		str	r2, [sp, #4]
  61              		.loc 1 549 3 view .LVU7
  62 0022 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 549 3 view .LVU8
 550:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  65              		.loc 1 550 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 550 3 view .LVU10
  68              		.loc 1 550 3 view .LVU11
  69 0024 5A69     		ldr	r2, [r3, #20]
  70 0026 42F48022 		orr	r2, r2, #262144
  71 002a 5A61     		str	r2, [r3, #20]
  72              		.loc 1 550 3 view .LVU12
  73 002c 5B69     		ldr	r3, [r3, #20]
  74 002e 03F48023 		and	r3, r3, #262144
  75 0032 0293     		str	r3, [sp, #8]
  76              		.loc 1 550 3 view .LVU13
  77 0034 029B     		ldr	r3, [sp, #8]
  78              	.LBE5:
ARM GAS  /tmp/ccGMsmZ9.s 			page 12


  79              		.loc 1 550 3 view .LVU14
 551:Core/Src/main.c **** 
 552:Core/Src/main.c ****   /*Configure GPIO pin : PA1 */
 553:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1;
  80              		.loc 1 553 3 view .LVU15
  81              		.loc 1 553 23 is_stmt 0 view .LVU16
  82 0036 0225     		movs	r5, #2
  83 0038 0395     		str	r5, [sp, #12]
 554:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  84              		.loc 1 554 3 is_stmt 1 view .LVU17
  85              		.loc 1 554 24 is_stmt 0 view .LVU18
  86 003a 0323     		movs	r3, #3
  87 003c 0493     		str	r3, [sp, #16]
 555:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 555 3 is_stmt 1 view .LVU19
 556:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  89              		.loc 1 556 3 view .LVU20
  90 003e 03A9     		add	r1, sp, #12
  91 0040 4FF09040 		mov	r0, #1207959552
  92 0044 FFF7FEFF 		bl	HAL_GPIO_Init
  93              	.LVL0:
 557:Core/Src/main.c **** 
 558:Core/Src/main.c ****   /*Configure GPIO pins : PA3 PA4 */
 559:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
  94              		.loc 1 559 3 view .LVU21
  95              		.loc 1 559 23 is_stmt 0 view .LVU22
  96 0048 1823     		movs	r3, #24
  97 004a 0393     		str	r3, [sp, #12]
 560:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  98              		.loc 1 560 3 is_stmt 1 view .LVU23
  99              		.loc 1 560 24 is_stmt 0 view .LVU24
 100 004c 4FF48816 		mov	r6, #1114112
 101 0050 0496     		str	r6, [sp, #16]
 561:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 102              		.loc 1 561 3 is_stmt 1 view .LVU25
 103              		.loc 1 561 24 is_stmt 0 view .LVU26
 104 0052 0127     		movs	r7, #1
 105 0054 0597     		str	r7, [sp, #20]
 562:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 106              		.loc 1 562 3 is_stmt 1 view .LVU27
 107 0056 03A9     		add	r1, sp, #12
 108 0058 4FF09040 		mov	r0, #1207959552
 109 005c FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL1:
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /*Configure GPIO pin : PB0 */
 565:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 111              		.loc 1 565 3 view .LVU28
 112              		.loc 1 565 23 is_stmt 0 view .LVU29
 113 0060 0397     		str	r7, [sp, #12]
 566:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 114              		.loc 1 566 3 is_stmt 1 view .LVU30
 115              		.loc 1 566 24 is_stmt 0 view .LVU31
 116 0062 0496     		str	r6, [sp, #16]
 567:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 117              		.loc 1 567 3 is_stmt 1 view .LVU32
 118              		.loc 1 567 24 is_stmt 0 view .LVU33
ARM GAS  /tmp/ccGMsmZ9.s 			page 13


 119 0064 0595     		str	r5, [sp, #20]
 568:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 120              		.loc 1 568 3 is_stmt 1 view .LVU34
 121 0066 03A9     		add	r1, sp, #12
 122 0068 0748     		ldr	r0, .L3+4
 123 006a FFF7FEFF 		bl	HAL_GPIO_Init
 124              	.LVL2:
 569:Core/Src/main.c **** 
 570:Core/Src/main.c ****   /* EXTI interrupt init*/
 571:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 125              		.loc 1 571 3 view .LVU35
 126 006e 2246     		mov	r2, r4
 127 0070 2146     		mov	r1, r4
 128 0072 0620     		movs	r0, #6
 129 0074 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 130              	.LVL3:
 572:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 131              		.loc 1 572 3 view .LVU36
 132 0078 0620     		movs	r0, #6
 133 007a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 134              	.LVL4:
 573:Core/Src/main.c **** 
 574:Core/Src/main.c **** }
 135              		.loc 1 574 1 is_stmt 0 view .LVU37
 136 007e 09B0     		add	sp, sp, #36
 137              		.cfi_def_cfa_offset 20
 138              		@ sp needed
 139 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 140              	.L4:
 141 0082 00BF     		.align	2
 142              	.L3:
 143 0084 00100240 		.word	1073876992
 144 0088 00040048 		.word	1207960576
 145              		.cfi_endproc
 146              	.LFE130:
 148              		.section	.text.Error_Handler,"ax",%progbits
 149              		.align	1
 150              		.global	Error_Handler
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 155              	Error_Handler:
 156              	.LFB131:
 575:Core/Src/main.c **** 
 576:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 577:Core/Src/main.c **** 
 578:Core/Src/main.c **** /* USER CODE END 4 */
 579:Core/Src/main.c **** 
 580:Core/Src/main.c **** /**
 581:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 582:Core/Src/main.c ****   * @retval None
 583:Core/Src/main.c ****   */
 584:Core/Src/main.c **** void Error_Handler(void)
 585:Core/Src/main.c **** {
 157              		.loc 1 585 1 is_stmt 1 view -0
 158              		.cfi_startproc
 159              		@ Volatile: function does not return.
ARM GAS  /tmp/ccGMsmZ9.s 			page 14


 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 586:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 587:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 588:Core/Src/main.c ****   __disable_irq();
 163              		.loc 1 588 3 view .LVU39
 164              	.LBB6:
 165              	.LBI6:
 166              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
ARM GAS  /tmp/ccGMsmZ9.s 			page 15


  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccGMsmZ9.s 			page 16


 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 167              		.loc 2 140 27 view .LVU40
 168              	.LBB7:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 169              		.loc 2 142 3 view .LVU41
 170              		.syntax unified
 171              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 172 0000 72B6     		cpsid i
 173              	@ 0 "" 2
 174              		.thumb
 175              		.syntax unified
 176              	.L6:
 177              	.LBE7:
 178              	.LBE6:
 589:Core/Src/main.c ****   while (1)
 179              		.loc 1 589 3 discriminator 1 view .LVU42
 590:Core/Src/main.c ****   {
 591:Core/Src/main.c ****   }
 180              		.loc 1 591 3 discriminator 1 view .LVU43
 589:Core/Src/main.c ****   while (1)
 181              		.loc 1 589 9 discriminator 1 view .LVU44
ARM GAS  /tmp/ccGMsmZ9.s 			page 17


 182 0002 FEE7     		b	.L6
 183              		.cfi_endproc
 184              	.LFE131:
 186              		.section	.text.MX_TIM1_Init,"ax",%progbits
 187              		.align	1
 188              		.syntax unified
 189              		.thumb
 190              		.thumb_func
 192              	MX_TIM1_Init:
 193              	.LFB127:
 370:Core/Src/main.c **** 
 194              		.loc 1 370 1 view -0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 104
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198 0000 10B5     		push	{r4, lr}
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 4, -8
 201              		.cfi_offset 14, -4
 202 0002 9AB0     		sub	sp, sp, #104
 203              		.cfi_def_cfa_offset 112
 376:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 204              		.loc 1 376 3 view .LVU46
 376:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 205              		.loc 1 376 26 is_stmt 0 view .LVU47
 206 0004 0024     		movs	r4, #0
 207 0006 1694     		str	r4, [sp, #88]
 208 0008 1794     		str	r4, [sp, #92]
 209 000a 1894     		str	r4, [sp, #96]
 210 000c 1994     		str	r4, [sp, #100]
 377:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 211              		.loc 1 377 3 is_stmt 1 view .LVU48
 377:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 212              		.loc 1 377 27 is_stmt 0 view .LVU49
 213 000e 1394     		str	r4, [sp, #76]
 214 0010 1494     		str	r4, [sp, #80]
 215 0012 1594     		str	r4, [sp, #84]
 378:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 216              		.loc 1 378 3 is_stmt 1 view .LVU50
 378:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 217              		.loc 1 378 22 is_stmt 0 view .LVU51
 218 0014 0C94     		str	r4, [sp, #48]
 219 0016 0D94     		str	r4, [sp, #52]
 220 0018 0E94     		str	r4, [sp, #56]
 221 001a 0F94     		str	r4, [sp, #60]
 222 001c 1094     		str	r4, [sp, #64]
 223 001e 1194     		str	r4, [sp, #68]
 224 0020 1294     		str	r4, [sp, #72]
 379:Core/Src/main.c **** 
 225              		.loc 1 379 3 is_stmt 1 view .LVU52
 379:Core/Src/main.c **** 
 226              		.loc 1 379 34 is_stmt 0 view .LVU53
 227 0022 2C22     		movs	r2, #44
 228 0024 2146     		mov	r1, r4
 229 0026 01A8     		add	r0, sp, #4
 230 0028 FFF7FEFF 		bl	memset
 231              	.LVL5:
ARM GAS  /tmp/ccGMsmZ9.s 			page 18


 384:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 232              		.loc 1 384 3 is_stmt 1 view .LVU54
 384:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 233              		.loc 1 384 18 is_stmt 0 view .LVU55
 234 002c 3E48     		ldr	r0, .L27
 235 002e 3F4B     		ldr	r3, .L27+4
 236 0030 0360     		str	r3, [r0]
 385:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 237              		.loc 1 385 3 is_stmt 1 view .LVU56
 385:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 238              		.loc 1 385 24 is_stmt 0 view .LVU57
 239 0032 0123     		movs	r3, #1
 240 0034 4360     		str	r3, [r0, #4]
 386:Core/Src/main.c ****   htim1.Init.Period = 65535;
 241              		.loc 1 386 3 is_stmt 1 view .LVU58
 386:Core/Src/main.c ****   htim1.Init.Period = 65535;
 242              		.loc 1 386 26 is_stmt 0 view .LVU59
 243 0036 8460     		str	r4, [r0, #8]
 387:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 244              		.loc 1 387 3 is_stmt 1 view .LVU60
 387:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 245              		.loc 1 387 21 is_stmt 0 view .LVU61
 246 0038 4FF6FF73 		movw	r3, #65535
 247 003c C360     		str	r3, [r0, #12]
 388:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 248              		.loc 1 388 3 is_stmt 1 view .LVU62
 388:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 249              		.loc 1 388 28 is_stmt 0 view .LVU63
 250 003e 0461     		str	r4, [r0, #16]
 389:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 251              		.loc 1 389 3 is_stmt 1 view .LVU64
 389:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 252              		.loc 1 389 32 is_stmt 0 view .LVU65
 253 0040 4461     		str	r4, [r0, #20]
 390:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 254              		.loc 1 390 3 is_stmt 1 view .LVU66
 390:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 255              		.loc 1 390 32 is_stmt 0 view .LVU67
 256 0042 8461     		str	r4, [r0, #24]
 391:Core/Src/main.c ****   {
 257              		.loc 1 391 3 is_stmt 1 view .LVU68
 391:Core/Src/main.c ****   {
 258              		.loc 1 391 7 is_stmt 0 view .LVU69
 259 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 260              	.LVL6:
 391:Core/Src/main.c ****   {
 261              		.loc 1 391 6 view .LVU70
 262 0048 0028     		cmp	r0, #0
 263 004a 5BD1     		bne	.L18
 395:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 264              		.loc 1 395 3 is_stmt 1 view .LVU71
 395:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 265              		.loc 1 395 34 is_stmt 0 view .LVU72
 266 004c 4FF48053 		mov	r3, #4096
 267 0050 1693     		str	r3, [sp, #88]
 396:Core/Src/main.c ****   {
 268              		.loc 1 396 3 is_stmt 1 view .LVU73
ARM GAS  /tmp/ccGMsmZ9.s 			page 19


 396:Core/Src/main.c ****   {
 269              		.loc 1 396 7 is_stmt 0 view .LVU74
 270 0052 16A9     		add	r1, sp, #88
 271 0054 3448     		ldr	r0, .L27
 272 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 273              	.LVL7:
 396:Core/Src/main.c ****   {
 274              		.loc 1 396 6 view .LVU75
 275 005a 0028     		cmp	r0, #0
 276 005c 54D1     		bne	.L19
 400:Core/Src/main.c ****   {
 277              		.loc 1 400 3 is_stmt 1 view .LVU76
 400:Core/Src/main.c ****   {
 278              		.loc 1 400 7 is_stmt 0 view .LVU77
 279 005e 3248     		ldr	r0, .L27
 280 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 281              	.LVL8:
 400:Core/Src/main.c ****   {
 282              		.loc 1 400 6 view .LVU78
 283 0064 0028     		cmp	r0, #0
 284 0066 51D1     		bne	.L20
 404:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 285              		.loc 1 404 3 is_stmt 1 view .LVU79
 404:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 286              		.loc 1 404 37 is_stmt 0 view .LVU80
 287 0068 0023     		movs	r3, #0
 288 006a 1393     		str	r3, [sp, #76]
 405:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 289              		.loc 1 405 3 is_stmt 1 view .LVU81
 405:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 290              		.loc 1 405 38 is_stmt 0 view .LVU82
 291 006c 1493     		str	r3, [sp, #80]
 406:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 292              		.loc 1 406 3 is_stmt 1 view .LVU83
 406:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 293              		.loc 1 406 33 is_stmt 0 view .LVU84
 294 006e 1593     		str	r3, [sp, #84]
 407:Core/Src/main.c ****   {
 295              		.loc 1 407 3 is_stmt 1 view .LVU85
 407:Core/Src/main.c ****   {
 296              		.loc 1 407 7 is_stmt 0 view .LVU86
 297 0070 13A9     		add	r1, sp, #76
 298 0072 2D48     		ldr	r0, .L27
 299 0074 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 300              	.LVL9:
 407:Core/Src/main.c ****   {
 301              		.loc 1 407 6 view .LVU87
 302 0078 0028     		cmp	r0, #0
 303 007a 49D1     		bne	.L21
 411:Core/Src/main.c ****   sConfigOC.Pulse = 0x5555;
 304              		.loc 1 411 3 is_stmt 1 view .LVU88
 411:Core/Src/main.c ****   sConfigOC.Pulse = 0x5555;
 305              		.loc 1 411 20 is_stmt 0 view .LVU89
 306 007c 6023     		movs	r3, #96
 307 007e 0C93     		str	r3, [sp, #48]
 412:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 308              		.loc 1 412 3 is_stmt 1 view .LVU90
ARM GAS  /tmp/ccGMsmZ9.s 			page 20


 412:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 309              		.loc 1 412 19 is_stmt 0 view .LVU91
 310 0080 45F25553 		movw	r3, #21845
 311 0084 0D93     		str	r3, [sp, #52]
 413:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 312              		.loc 1 413 3 is_stmt 1 view .LVU92
 413:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 313              		.loc 1 413 24 is_stmt 0 view .LVU93
 314 0086 0022     		movs	r2, #0
 315 0088 0E92     		str	r2, [sp, #56]
 414:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 316              		.loc 1 414 3 is_stmt 1 view .LVU94
 414:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 317              		.loc 1 414 25 is_stmt 0 view .LVU95
 318 008a 0F92     		str	r2, [sp, #60]
 415:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 319              		.loc 1 415 3 is_stmt 1 view .LVU96
 415:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 320              		.loc 1 415 24 is_stmt 0 view .LVU97
 321 008c 1092     		str	r2, [sp, #64]
 416:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 322              		.loc 1 416 3 is_stmt 1 view .LVU98
 416:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 323              		.loc 1 416 25 is_stmt 0 view .LVU99
 324 008e 1192     		str	r2, [sp, #68]
 417:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 325              		.loc 1 417 3 is_stmt 1 view .LVU100
 417:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 326              		.loc 1 417 26 is_stmt 0 view .LVU101
 327 0090 1292     		str	r2, [sp, #72]
 418:Core/Src/main.c ****   {
 328              		.loc 1 418 3 is_stmt 1 view .LVU102
 418:Core/Src/main.c ****   {
 329              		.loc 1 418 7 is_stmt 0 view .LVU103
 330 0092 0CA9     		add	r1, sp, #48
 331 0094 2448     		ldr	r0, .L27
 332 0096 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 333              	.LVL10:
 418:Core/Src/main.c ****   {
 334              		.loc 1 418 6 view .LVU104
 335 009a 0028     		cmp	r0, #0
 336 009c 3AD1     		bne	.L22
 422:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 337              		.loc 1 422 3 is_stmt 1 view .LVU105
 422:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 338              		.loc 1 422 19 is_stmt 0 view .LVU106
 339 009e 0023     		movs	r3, #0
 340 00a0 0D93     		str	r3, [sp, #52]
 423:Core/Src/main.c ****   {
 341              		.loc 1 423 3 is_stmt 1 view .LVU107
 423:Core/Src/main.c ****   {
 342              		.loc 1 423 7 is_stmt 0 view .LVU108
 343 00a2 0422     		movs	r2, #4
 344 00a4 0CA9     		add	r1, sp, #48
 345 00a6 2048     		ldr	r0, .L27
 346 00a8 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 347              	.LVL11:
ARM GAS  /tmp/ccGMsmZ9.s 			page 21


 423:Core/Src/main.c ****   {
 348              		.loc 1 423 6 view .LVU109
 349 00ac 0028     		cmp	r0, #0
 350 00ae 33D1     		bne	.L23
 427:Core/Src/main.c ****   {
 351              		.loc 1 427 3 is_stmt 1 view .LVU110
 427:Core/Src/main.c ****   {
 352              		.loc 1 427 7 is_stmt 0 view .LVU111
 353 00b0 0822     		movs	r2, #8
 354 00b2 0CA9     		add	r1, sp, #48
 355 00b4 1C48     		ldr	r0, .L27
 356 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 357              	.LVL12:
 427:Core/Src/main.c ****   {
 358              		.loc 1 427 6 view .LVU112
 359 00ba 0028     		cmp	r0, #0
 360 00bc 2ED1     		bne	.L24
 431:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 361              		.loc 1 431 3 is_stmt 1 view .LVU113
 431:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 362              		.loc 1 431 19 is_stmt 0 view .LVU114
 363 00be 45F25553 		movw	r3, #21845
 364 00c2 0D93     		str	r3, [sp, #52]
 432:Core/Src/main.c ****   {
 365              		.loc 1 432 3 is_stmt 1 view .LVU115
 432:Core/Src/main.c ****   {
 366              		.loc 1 432 7 is_stmt 0 view .LVU116
 367 00c4 0C22     		movs	r2, #12
 368 00c6 0CA9     		add	r1, sp, #48
 369 00c8 1748     		ldr	r0, .L27
 370 00ca FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 371              	.LVL13:
 432:Core/Src/main.c ****   {
 372              		.loc 1 432 6 view .LVU117
 373 00ce 38BB     		cbnz	r0, .L25
 436:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 374              		.loc 1 436 3 is_stmt 1 view .LVU118
 436:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 375              		.loc 1 436 40 is_stmt 0 view .LVU119
 376 00d0 0023     		movs	r3, #0
 377 00d2 0193     		str	r3, [sp, #4]
 437:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 378              		.loc 1 437 3 is_stmt 1 view .LVU120
 437:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 379              		.loc 1 437 41 is_stmt 0 view .LVU121
 380 00d4 0293     		str	r3, [sp, #8]
 438:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 381              		.loc 1 438 3 is_stmt 1 view .LVU122
 438:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 382              		.loc 1 438 34 is_stmt 0 view .LVU123
 383 00d6 0393     		str	r3, [sp, #12]
 439:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 384              		.loc 1 439 3 is_stmt 1 view .LVU124
 439:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 385              		.loc 1 439 33 is_stmt 0 view .LVU125
 386 00d8 0493     		str	r3, [sp, #16]
 440:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
ARM GAS  /tmp/ccGMsmZ9.s 			page 22


 387              		.loc 1 440 3 is_stmt 1 view .LVU126
 440:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 388              		.loc 1 440 35 is_stmt 0 view .LVU127
 389 00da 0593     		str	r3, [sp, #20]
 441:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 390              		.loc 1 441 3 is_stmt 1 view .LVU128
 441:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 391              		.loc 1 441 38 is_stmt 0 view .LVU129
 392 00dc 4FF40052 		mov	r2, #8192
 393 00e0 0692     		str	r2, [sp, #24]
 442:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 394              		.loc 1 442 3 is_stmt 1 view .LVU130
 442:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 395              		.loc 1 442 36 is_stmt 0 view .LVU131
 396 00e2 0793     		str	r3, [sp, #28]
 443:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 397              		.loc 1 443 3 is_stmt 1 view .LVU132
 443:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 398              		.loc 1 443 36 is_stmt 0 view .LVU133
 399 00e4 0893     		str	r3, [sp, #32]
 444:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 400              		.loc 1 444 3 is_stmt 1 view .LVU134
 444:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 401              		.loc 1 444 39 is_stmt 0 view .LVU135
 402 00e6 4FF00072 		mov	r2, #33554432
 403 00ea 0992     		str	r2, [sp, #36]
 445:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 404              		.loc 1 445 3 is_stmt 1 view .LVU136
 445:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 405              		.loc 1 445 37 is_stmt 0 view .LVU137
 406 00ec 0A93     		str	r3, [sp, #40]
 446:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 407              		.loc 1 446 3 is_stmt 1 view .LVU138
 446:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 408              		.loc 1 446 40 is_stmt 0 view .LVU139
 409 00ee 0B93     		str	r3, [sp, #44]
 447:Core/Src/main.c ****   {
 410              		.loc 1 447 3 is_stmt 1 view .LVU140
 447:Core/Src/main.c ****   {
 411              		.loc 1 447 7 is_stmt 0 view .LVU141
 412 00f0 01A9     		add	r1, sp, #4
 413 00f2 0D48     		ldr	r0, .L27
 414 00f4 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 415              	.LVL14:
 447:Core/Src/main.c ****   {
 416              		.loc 1 447 6 view .LVU142
 417 00f8 A0B9     		cbnz	r0, .L26
 454:Core/Src/main.c **** 
 418              		.loc 1 454 3 is_stmt 1 view .LVU143
 419 00fa 0B48     		ldr	r0, .L27
 420 00fc FFF7FEFF 		bl	HAL_TIM_MspPostInit
 421              	.LVL15:
 456:Core/Src/main.c **** 
 422              		.loc 1 456 1 is_stmt 0 view .LVU144
 423 0100 1AB0     		add	sp, sp, #104
 424              		.cfi_remember_state
 425              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccGMsmZ9.s 			page 23


 426              		@ sp needed
 427 0102 10BD     		pop	{r4, pc}
 428              	.L18:
 429              		.cfi_restore_state
 393:Core/Src/main.c ****   }
 430              		.loc 1 393 5 is_stmt 1 view .LVU145
 431 0104 FFF7FEFF 		bl	Error_Handler
 432              	.LVL16:
 433              	.L19:
 398:Core/Src/main.c ****   }
 434              		.loc 1 398 5 view .LVU146
 435 0108 FFF7FEFF 		bl	Error_Handler
 436              	.LVL17:
 437              	.L20:
 402:Core/Src/main.c ****   }
 438              		.loc 1 402 5 view .LVU147
 439 010c FFF7FEFF 		bl	Error_Handler
 440              	.LVL18:
 441              	.L21:
 409:Core/Src/main.c ****   }
 442              		.loc 1 409 5 view .LVU148
 443 0110 FFF7FEFF 		bl	Error_Handler
 444              	.LVL19:
 445              	.L22:
 420:Core/Src/main.c ****   }
 446              		.loc 1 420 5 view .LVU149
 447 0114 FFF7FEFF 		bl	Error_Handler
 448              	.LVL20:
 449              	.L23:
 425:Core/Src/main.c ****   }
 450              		.loc 1 425 5 view .LVU150
 451 0118 FFF7FEFF 		bl	Error_Handler
 452              	.LVL21:
 453              	.L24:
 429:Core/Src/main.c ****   }
 454              		.loc 1 429 5 view .LVU151
 455 011c FFF7FEFF 		bl	Error_Handler
 456              	.LVL22:
 457              	.L25:
 434:Core/Src/main.c ****   }
 458              		.loc 1 434 5 view .LVU152
 459 0120 FFF7FEFF 		bl	Error_Handler
 460              	.LVL23:
 461              	.L26:
 449:Core/Src/main.c ****   }
 462              		.loc 1 449 5 view .LVU153
 463 0124 FFF7FEFF 		bl	Error_Handler
 464              	.LVL24:
 465              	.L28:
 466              		.align	2
 467              	.L27:
 468 0128 00000000 		.word	htim1
 469 012c 002C0140 		.word	1073818624
 470              		.cfi_endproc
 471              	.LFE127:
 473              		.section	.text.MX_I2C1_Init,"ax",%progbits
 474              		.align	1
ARM GAS  /tmp/ccGMsmZ9.s 			page 24


 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 479              	MX_I2C1_Init:
 480              	.LFB125:
 284:Core/Src/main.c **** 
 481              		.loc 1 284 1 view -0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485 0000 08B5     		push	{r3, lr}
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 3, -8
 488              		.cfi_offset 14, -4
 293:Core/Src/main.c ****   hi2c1.Init.Timing = 0x2000090E;
 489              		.loc 1 293 3 view .LVU155
 293:Core/Src/main.c ****   hi2c1.Init.Timing = 0x2000090E;
 490              		.loc 1 293 18 is_stmt 0 view .LVU156
 491 0002 1148     		ldr	r0, .L37
 492 0004 114B     		ldr	r3, .L37+4
 493 0006 0360     		str	r3, [r0]
 294:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 494              		.loc 1 294 3 is_stmt 1 view .LVU157
 294:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 495              		.loc 1 294 21 is_stmt 0 view .LVU158
 496 0008 114B     		ldr	r3, .L37+8
 497 000a 4360     		str	r3, [r0, #4]
 295:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 498              		.loc 1 295 3 is_stmt 1 view .LVU159
 295:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 499              		.loc 1 295 26 is_stmt 0 view .LVU160
 500 000c 0023     		movs	r3, #0
 501 000e 8360     		str	r3, [r0, #8]
 296:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 502              		.loc 1 296 3 is_stmt 1 view .LVU161
 296:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 503              		.loc 1 296 29 is_stmt 0 view .LVU162
 504 0010 0122     		movs	r2, #1
 505 0012 C260     		str	r2, [r0, #12]
 297:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 506              		.loc 1 297 3 is_stmt 1 view .LVU163
 297:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 507              		.loc 1 297 30 is_stmt 0 view .LVU164
 508 0014 0361     		str	r3, [r0, #16]
 298:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 509              		.loc 1 298 3 is_stmt 1 view .LVU165
 298:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 510              		.loc 1 298 26 is_stmt 0 view .LVU166
 511 0016 4361     		str	r3, [r0, #20]
 299:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 512              		.loc 1 299 3 is_stmt 1 view .LVU167
 299:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 513              		.loc 1 299 31 is_stmt 0 view .LVU168
 514 0018 8361     		str	r3, [r0, #24]
 300:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 515              		.loc 1 300 3 is_stmt 1 view .LVU169
 300:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
ARM GAS  /tmp/ccGMsmZ9.s 			page 25


 516              		.loc 1 300 30 is_stmt 0 view .LVU170
 517 001a C361     		str	r3, [r0, #28]
 301:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 518              		.loc 1 301 3 is_stmt 1 view .LVU171
 301:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 519              		.loc 1 301 28 is_stmt 0 view .LVU172
 520 001c 0362     		str	r3, [r0, #32]
 302:Core/Src/main.c ****   {
 521              		.loc 1 302 3 is_stmt 1 view .LVU173
 302:Core/Src/main.c ****   {
 522              		.loc 1 302 7 is_stmt 0 view .LVU174
 523 001e FFF7FEFF 		bl	HAL_I2C_Init
 524              	.LVL25:
 302:Core/Src/main.c ****   {
 525              		.loc 1 302 6 view .LVU175
 526 0022 50B9     		cbnz	r0, .L34
 308:Core/Src/main.c ****   {
 527              		.loc 1 308 3 is_stmt 1 view .LVU176
 308:Core/Src/main.c ****   {
 528              		.loc 1 308 7 is_stmt 0 view .LVU177
 529 0024 0021     		movs	r1, #0
 530 0026 0848     		ldr	r0, .L37
 531 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 532              	.LVL26:
 308:Core/Src/main.c ****   {
 533              		.loc 1 308 6 view .LVU178
 534 002c 38B9     		cbnz	r0, .L35
 314:Core/Src/main.c ****   {
 535              		.loc 1 314 3 is_stmt 1 view .LVU179
 314:Core/Src/main.c ****   {
 536              		.loc 1 314 7 is_stmt 0 view .LVU180
 537 002e 0021     		movs	r1, #0
 538 0030 0548     		ldr	r0, .L37
 539 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 540              	.LVL27:
 314:Core/Src/main.c ****   {
 541              		.loc 1 314 6 view .LVU181
 542 0036 20B9     		cbnz	r0, .L36
 322:Core/Src/main.c **** 
 543              		.loc 1 322 1 view .LVU182
 544 0038 08BD     		pop	{r3, pc}
 545              	.L34:
 304:Core/Src/main.c ****   }
 546              		.loc 1 304 5 is_stmt 1 view .LVU183
 547 003a FFF7FEFF 		bl	Error_Handler
 548              	.LVL28:
 549              	.L35:
 310:Core/Src/main.c ****   }
 550              		.loc 1 310 5 view .LVU184
 551 003e FFF7FEFF 		bl	Error_Handler
 552              	.LVL29:
 553              	.L36:
 316:Core/Src/main.c ****   }
 554              		.loc 1 316 5 view .LVU185
 555 0042 FFF7FEFF 		bl	Error_Handler
 556              	.LVL30:
 557              	.L38:
ARM GAS  /tmp/ccGMsmZ9.s 			page 26


 558 0046 00BF     		.align	2
 559              	.L37:
 560 0048 00000000 		.word	hi2c1
 561 004c 00540040 		.word	1073763328
 562 0050 0E090020 		.word	536873230
 563              		.cfi_endproc
 564              	.LFE125:
 566              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 567              		.align	1
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 572              	MX_USART2_UART_Init:
 573              	.LFB129:
 509:Core/Src/main.c **** 
 574              		.loc 1 509 1 view -0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578 0000 08B5     		push	{r3, lr}
 579              		.cfi_def_cfa_offset 8
 580              		.cfi_offset 3, -8
 581              		.cfi_offset 14, -4
 518:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 582              		.loc 1 518 3 view .LVU187
 518:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 583              		.loc 1 518 19 is_stmt 0 view .LVU188
 584 0002 0D48     		ldr	r0, .L43
 585 0004 0D4B     		ldr	r3, .L43+4
 586 0006 0360     		str	r3, [r0]
 519:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 587              		.loc 1 519 3 is_stmt 1 view .LVU189
 519:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 588              		.loc 1 519 24 is_stmt 0 view .LVU190
 589 0008 4FF41653 		mov	r3, #9600
 590 000c 4360     		str	r3, [r0, #4]
 520:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 591              		.loc 1 520 3 is_stmt 1 view .LVU191
 520:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 592              		.loc 1 520 26 is_stmt 0 view .LVU192
 593 000e 0023     		movs	r3, #0
 594 0010 8360     		str	r3, [r0, #8]
 521:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 595              		.loc 1 521 3 is_stmt 1 view .LVU193
 521:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 596              		.loc 1 521 24 is_stmt 0 view .LVU194
 597 0012 C360     		str	r3, [r0, #12]
 522:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 598              		.loc 1 522 3 is_stmt 1 view .LVU195
 522:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 599              		.loc 1 522 22 is_stmt 0 view .LVU196
 600 0014 0361     		str	r3, [r0, #16]
 523:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 601              		.loc 1 523 3 is_stmt 1 view .LVU197
 523:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 602              		.loc 1 523 20 is_stmt 0 view .LVU198
 603 0016 0C22     		movs	r2, #12
ARM GAS  /tmp/ccGMsmZ9.s 			page 27


 604 0018 4261     		str	r2, [r0, #20]
 524:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 605              		.loc 1 524 3 is_stmt 1 view .LVU199
 524:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 606              		.loc 1 524 25 is_stmt 0 view .LVU200
 607 001a 8361     		str	r3, [r0, #24]
 525:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 608              		.loc 1 525 3 is_stmt 1 view .LVU201
 525:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 609              		.loc 1 525 28 is_stmt 0 view .LVU202
 610 001c C361     		str	r3, [r0, #28]
 526:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 611              		.loc 1 526 3 is_stmt 1 view .LVU203
 526:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 612              		.loc 1 526 30 is_stmt 0 view .LVU204
 613 001e 0362     		str	r3, [r0, #32]
 527:Core/Src/main.c ****   huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 614              		.loc 1 527 3 is_stmt 1 view .LVU205
 527:Core/Src/main.c ****   huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 615              		.loc 1 527 38 is_stmt 0 view .LVU206
 616 0020 1023     		movs	r3, #16
 617 0022 4362     		str	r3, [r0, #36]
 528:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 618              		.loc 1 528 3 is_stmt 1 view .LVU207
 528:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 619              		.loc 1 528 38 is_stmt 0 view .LVU208
 620 0024 4FF48053 		mov	r3, #4096
 621 0028 8363     		str	r3, [r0, #56]
 529:Core/Src/main.c ****   {
 622              		.loc 1 529 3 is_stmt 1 view .LVU209
 529:Core/Src/main.c ****   {
 623              		.loc 1 529 7 is_stmt 0 view .LVU210
 624 002a FFF7FEFF 		bl	HAL_UART_Init
 625              	.LVL31:
 529:Core/Src/main.c ****   {
 626              		.loc 1 529 6 view .LVU211
 627 002e 00B9     		cbnz	r0, .L42
 537:Core/Src/main.c **** 
 628              		.loc 1 537 1 view .LVU212
 629 0030 08BD     		pop	{r3, pc}
 630              	.L42:
 531:Core/Src/main.c ****   }
 631              		.loc 1 531 5 is_stmt 1 view .LVU213
 632 0032 FFF7FEFF 		bl	Error_Handler
 633              	.LVL32:
 634              	.L44:
 635 0036 00BF     		.align	2
 636              	.L43:
 637 0038 00000000 		.word	huart2
 638 003c 00440040 		.word	1073759232
 639              		.cfi_endproc
 640              	.LFE129:
 642              		.section	.text.MX_SPI1_Init,"ax",%progbits
 643              		.align	1
 644              		.syntax unified
 645              		.thumb
 646              		.thumb_func
ARM GAS  /tmp/ccGMsmZ9.s 			page 28


 648              	MX_SPI1_Init:
 649              	.LFB126:
 330:Core/Src/main.c **** 
 650              		.loc 1 330 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654 0000 08B5     		push	{r3, lr}
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 3, -8
 657              		.cfi_offset 14, -4
 340:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 658              		.loc 1 340 3 view .LVU215
 340:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 659              		.loc 1 340 18 is_stmt 0 view .LVU216
 660 0002 1048     		ldr	r0, .L49
 661 0004 104B     		ldr	r3, .L49+4
 662 0006 0360     		str	r3, [r0]
 341:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 663              		.loc 1 341 3 is_stmt 1 view .LVU217
 341:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 664              		.loc 1 341 19 is_stmt 0 view .LVU218
 665 0008 4FF48273 		mov	r3, #260
 666 000c 4360     		str	r3, [r0, #4]
 342:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 667              		.loc 1 342 3 is_stmt 1 view .LVU219
 342:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 668              		.loc 1 342 24 is_stmt 0 view .LVU220
 669 000e 4FF48063 		mov	r3, #1024
 670 0012 8360     		str	r3, [r0, #8]
 343:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 671              		.loc 1 343 3 is_stmt 1 view .LVU221
 343:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 672              		.loc 1 343 23 is_stmt 0 view .LVU222
 673 0014 4FF44073 		mov	r3, #768
 674 0018 C360     		str	r3, [r0, #12]
 344:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 675              		.loc 1 344 3 is_stmt 1 view .LVU223
 344:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 676              		.loc 1 344 26 is_stmt 0 view .LVU224
 677 001a 0023     		movs	r3, #0
 678 001c 0361     		str	r3, [r0, #16]
 345:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 679              		.loc 1 345 3 is_stmt 1 view .LVU225
 345:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 680              		.loc 1 345 23 is_stmt 0 view .LVU226
 681 001e 4361     		str	r3, [r0, #20]
 346:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 682              		.loc 1 346 3 is_stmt 1 view .LVU227
 346:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 683              		.loc 1 346 18 is_stmt 0 view .LVU228
 684 0020 4FF40072 		mov	r2, #512
 685 0024 8261     		str	r2, [r0, #24]
 347:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 686              		.loc 1 347 3 is_stmt 1 view .LVU229
 347:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 687              		.loc 1 347 32 is_stmt 0 view .LVU230
ARM GAS  /tmp/ccGMsmZ9.s 			page 29


 688 0026 C361     		str	r3, [r0, #28]
 348:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 689              		.loc 1 348 3 is_stmt 1 view .LVU231
 348:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 690              		.loc 1 348 23 is_stmt 0 view .LVU232
 691 0028 0362     		str	r3, [r0, #32]
 349:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 692              		.loc 1 349 3 is_stmt 1 view .LVU233
 349:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 693              		.loc 1 349 21 is_stmt 0 view .LVU234
 694 002a 4362     		str	r3, [r0, #36]
 350:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 695              		.loc 1 350 3 is_stmt 1 view .LVU235
 350:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 696              		.loc 1 350 29 is_stmt 0 view .LVU236
 697 002c 8362     		str	r3, [r0, #40]
 351:Core/Src/main.c ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 698              		.loc 1 351 3 is_stmt 1 view .LVU237
 351:Core/Src/main.c ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 699              		.loc 1 351 28 is_stmt 0 view .LVU238
 700 002e 0722     		movs	r2, #7
 701 0030 C262     		str	r2, [r0, #44]
 352:Core/Src/main.c ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 702              		.loc 1 352 3 is_stmt 1 view .LVU239
 352:Core/Src/main.c ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 703              		.loc 1 352 24 is_stmt 0 view .LVU240
 704 0032 0363     		str	r3, [r0, #48]
 353:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 705              		.loc 1 353 3 is_stmt 1 view .LVU241
 353:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 706              		.loc 1 353 23 is_stmt 0 view .LVU242
 707 0034 0823     		movs	r3, #8
 708 0036 4363     		str	r3, [r0, #52]
 354:Core/Src/main.c ****   {
 709              		.loc 1 354 3 is_stmt 1 view .LVU243
 354:Core/Src/main.c ****   {
 710              		.loc 1 354 7 is_stmt 0 view .LVU244
 711 0038 FFF7FEFF 		bl	HAL_SPI_Init
 712              	.LVL33:
 354:Core/Src/main.c ****   {
 713              		.loc 1 354 6 view .LVU245
 714 003c 00B9     		cbnz	r0, .L48
 362:Core/Src/main.c **** 
 715              		.loc 1 362 1 view .LVU246
 716 003e 08BD     		pop	{r3, pc}
 717              	.L48:
 356:Core/Src/main.c ****   }
 718              		.loc 1 356 5 is_stmt 1 view .LVU247
 719 0040 FFF7FEFF 		bl	Error_Handler
 720              	.LVL34:
 721              	.L50:
 722              		.align	2
 723              	.L49:
 724 0044 00000000 		.word	hspi1
 725 0048 00300140 		.word	1073819648
 726              		.cfi_endproc
 727              	.LFE126:
ARM GAS  /tmp/ccGMsmZ9.s 			page 30


 729              		.section	.text.MX_TIM2_Init,"ax",%progbits
 730              		.align	1
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 735              	MX_TIM2_Init:
 736              	.LFB128:
 464:Core/Src/main.c **** 
 737              		.loc 1 464 1 view -0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 32
 740              		@ frame_needed = 0, uses_anonymous_args = 0
 741 0000 00B5     		push	{lr}
 742              		.cfi_def_cfa_offset 4
 743              		.cfi_offset 14, -4
 744 0002 89B0     		sub	sp, sp, #36
 745              		.cfi_def_cfa_offset 40
 470:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 746              		.loc 1 470 3 view .LVU249
 470:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 747              		.loc 1 470 26 is_stmt 0 view .LVU250
 748 0004 0023     		movs	r3, #0
 749 0006 0493     		str	r3, [sp, #16]
 750 0008 0593     		str	r3, [sp, #20]
 751 000a 0693     		str	r3, [sp, #24]
 752 000c 0793     		str	r3, [sp, #28]
 471:Core/Src/main.c **** 
 753              		.loc 1 471 3 is_stmt 1 view .LVU251
 471:Core/Src/main.c **** 
 754              		.loc 1 471 27 is_stmt 0 view .LVU252
 755 000e 0193     		str	r3, [sp, #4]
 756 0010 0293     		str	r3, [sp, #8]
 757 0012 0393     		str	r3, [sp, #12]
 476:Core/Src/main.c ****   htim2.Init.Prescaler = 43;
 758              		.loc 1 476 3 is_stmt 1 view .LVU253
 476:Core/Src/main.c ****   htim2.Init.Prescaler = 43;
 759              		.loc 1 476 18 is_stmt 0 view .LVU254
 760 0014 1348     		ldr	r0, .L59
 761 0016 4FF08042 		mov	r2, #1073741824
 762 001a 0260     		str	r2, [r0]
 477:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 763              		.loc 1 477 3 is_stmt 1 view .LVU255
 477:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 764              		.loc 1 477 24 is_stmt 0 view .LVU256
 765 001c 2B22     		movs	r2, #43
 766 001e 4260     		str	r2, [r0, #4]
 478:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 767              		.loc 1 478 3 is_stmt 1 view .LVU257
 478:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 768              		.loc 1 478 26 is_stmt 0 view .LVU258
 769 0020 8360     		str	r3, [r0, #8]
 479:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 770              		.loc 1 479 3 is_stmt 1 view .LVU259
 479:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 771              		.loc 1 479 21 is_stmt 0 view .LVU260
 772 0022 4FF0FF32 		mov	r2, #-1
 773 0026 C260     		str	r2, [r0, #12]
ARM GAS  /tmp/ccGMsmZ9.s 			page 31


 480:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 774              		.loc 1 480 3 is_stmt 1 view .LVU261
 480:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 775              		.loc 1 480 28 is_stmt 0 view .LVU262
 776 0028 0361     		str	r3, [r0, #16]
 481:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 777              		.loc 1 481 3 is_stmt 1 view .LVU263
 481:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 778              		.loc 1 481 32 is_stmt 0 view .LVU264
 779 002a 8361     		str	r3, [r0, #24]
 482:Core/Src/main.c ****   {
 780              		.loc 1 482 3 is_stmt 1 view .LVU265
 482:Core/Src/main.c ****   {
 781              		.loc 1 482 7 is_stmt 0 view .LVU266
 782 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 783              	.LVL35:
 482:Core/Src/main.c ****   {
 784              		.loc 1 482 6 view .LVU267
 785 0030 90B9     		cbnz	r0, .L56
 486:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 786              		.loc 1 486 3 is_stmt 1 view .LVU268
 486:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 787              		.loc 1 486 34 is_stmt 0 view .LVU269
 788 0032 4FF48053 		mov	r3, #4096
 789 0036 0493     		str	r3, [sp, #16]
 487:Core/Src/main.c ****   {
 790              		.loc 1 487 3 is_stmt 1 view .LVU270
 487:Core/Src/main.c ****   {
 791              		.loc 1 487 7 is_stmt 0 view .LVU271
 792 0038 04A9     		add	r1, sp, #16
 793 003a 0A48     		ldr	r0, .L59
 794 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 795              	.LVL36:
 487:Core/Src/main.c ****   {
 796              		.loc 1 487 6 view .LVU272
 797 0040 60B9     		cbnz	r0, .L57
 491:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 798              		.loc 1 491 3 is_stmt 1 view .LVU273
 491:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 799              		.loc 1 491 37 is_stmt 0 view .LVU274
 800 0042 0023     		movs	r3, #0
 801 0044 0193     		str	r3, [sp, #4]
 492:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802              		.loc 1 492 3 is_stmt 1 view .LVU275
 492:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 803              		.loc 1 492 33 is_stmt 0 view .LVU276
 804 0046 0393     		str	r3, [sp, #12]
 493:Core/Src/main.c ****   {
 805              		.loc 1 493 3 is_stmt 1 view .LVU277
 493:Core/Src/main.c ****   {
 806              		.loc 1 493 7 is_stmt 0 view .LVU278
 807 0048 01A9     		add	r1, sp, #4
 808 004a 0648     		ldr	r0, .L59
 809 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 810              	.LVL37:
 493:Core/Src/main.c ****   {
 811              		.loc 1 493 6 view .LVU279
ARM GAS  /tmp/ccGMsmZ9.s 			page 32


 812 0050 30B9     		cbnz	r0, .L58
 501:Core/Src/main.c **** 
 813              		.loc 1 501 1 view .LVU280
 814 0052 09B0     		add	sp, sp, #36
 815              		.cfi_remember_state
 816              		.cfi_def_cfa_offset 4
 817              		@ sp needed
 818 0054 5DF804FB 		ldr	pc, [sp], #4
 819              	.L56:
 820              		.cfi_restore_state
 484:Core/Src/main.c ****   }
 821              		.loc 1 484 5 is_stmt 1 view .LVU281
 822 0058 FFF7FEFF 		bl	Error_Handler
 823              	.LVL38:
 824              	.L57:
 489:Core/Src/main.c ****   }
 825              		.loc 1 489 5 view .LVU282
 826 005c FFF7FEFF 		bl	Error_Handler
 827              	.LVL39:
 828              	.L58:
 495:Core/Src/main.c ****   }
 829              		.loc 1 495 5 view .LVU283
 830 0060 FFF7FEFF 		bl	Error_Handler
 831              	.LVL40:
 832              	.L60:
 833              		.align	2
 834              	.L59:
 835 0064 00000000 		.word	htim2
 836              		.cfi_endproc
 837              	.LFE128:
 839              		.section	.text.SystemClock_Config,"ax",%progbits
 840              		.align	1
 841              		.global	SystemClock_Config
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 846              	SystemClock_Config:
 847              	.LFB124:
 238:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 848              		.loc 1 238 1 view -0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 88
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852 0000 00B5     		push	{lr}
 853              		.cfi_def_cfa_offset 4
 854              		.cfi_offset 14, -4
 855 0002 97B0     		sub	sp, sp, #92
 856              		.cfi_def_cfa_offset 96
 239:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 857              		.loc 1 239 3 view .LVU285
 239:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 858              		.loc 1 239 22 is_stmt 0 view .LVU286
 859 0004 2822     		movs	r2, #40
 860 0006 0021     		movs	r1, #0
 861 0008 0CA8     		add	r0, sp, #48
 862 000a FFF7FEFF 		bl	memset
 863              	.LVL41:
ARM GAS  /tmp/ccGMsmZ9.s 			page 33


 240:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 864              		.loc 1 240 3 is_stmt 1 view .LVU287
 240:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 865              		.loc 1 240 22 is_stmt 0 view .LVU288
 866 000e 0023     		movs	r3, #0
 867 0010 0793     		str	r3, [sp, #28]
 868 0012 0893     		str	r3, [sp, #32]
 869 0014 0993     		str	r3, [sp, #36]
 870 0016 0A93     		str	r3, [sp, #40]
 871 0018 0B93     		str	r3, [sp, #44]
 241:Core/Src/main.c **** 
 872              		.loc 1 241 3 is_stmt 1 view .LVU289
 241:Core/Src/main.c **** 
 873              		.loc 1 241 28 is_stmt 0 view .LVU290
 874 001a 0193     		str	r3, [sp, #4]
 875 001c 0293     		str	r3, [sp, #8]
 876 001e 0393     		str	r3, [sp, #12]
 877 0020 0493     		str	r3, [sp, #16]
 878 0022 0593     		str	r3, [sp, #20]
 879 0024 0693     		str	r3, [sp, #24]
 246:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 880              		.loc 1 246 3 is_stmt 1 view .LVU291
 246:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 881              		.loc 1 246 36 is_stmt 0 view .LVU292
 882 0026 0223     		movs	r3, #2
 883 0028 0C93     		str	r3, [sp, #48]
 247:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 884              		.loc 1 247 3 is_stmt 1 view .LVU293
 247:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 885              		.loc 1 247 30 is_stmt 0 view .LVU294
 886 002a 0122     		movs	r2, #1
 887 002c 1092     		str	r2, [sp, #64]
 248:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 888              		.loc 1 248 3 is_stmt 1 view .LVU295
 248:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 889              		.loc 1 248 41 is_stmt 0 view .LVU296
 890 002e 1022     		movs	r2, #16
 891 0030 1192     		str	r2, [sp, #68]
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 892              		.loc 1 249 3 is_stmt 1 view .LVU297
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 893              		.loc 1 249 34 is_stmt 0 view .LVU298
 894 0032 1393     		str	r3, [sp, #76]
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL11;
 895              		.loc 1 250 3 is_stmt 1 view .LVU299
 251:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 896              		.loc 1 251 3 view .LVU300
 251:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 897              		.loc 1 251 32 is_stmt 0 view .LVU301
 898 0034 4FF41013 		mov	r3, #2359296
 899 0038 1593     		str	r3, [sp, #84]
 252:Core/Src/main.c ****   {
 900              		.loc 1 252 3 is_stmt 1 view .LVU302
 252:Core/Src/main.c ****   {
 901              		.loc 1 252 7 is_stmt 0 view .LVU303
 902 003a 0CA8     		add	r0, sp, #48
 903 003c FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/ccGMsmZ9.s 			page 34


 904              	.LVL42:
 252:Core/Src/main.c ****   {
 905              		.loc 1 252 6 view .LVU304
 906 0040 D8B9     		cbnz	r0, .L66
 258:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 907              		.loc 1 258 3 is_stmt 1 view .LVU305
 258:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 908              		.loc 1 258 31 is_stmt 0 view .LVU306
 909 0042 0F23     		movs	r3, #15
 910 0044 0793     		str	r3, [sp, #28]
 260:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 911              		.loc 1 260 3 is_stmt 1 view .LVU307
 260:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 912              		.loc 1 260 34 is_stmt 0 view .LVU308
 913 0046 0223     		movs	r3, #2
 914 0048 0893     		str	r3, [sp, #32]
 261:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 915              		.loc 1 261 3 is_stmt 1 view .LVU309
 261:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 916              		.loc 1 261 35 is_stmt 0 view .LVU310
 917 004a 0023     		movs	r3, #0
 918 004c 0993     		str	r3, [sp, #36]
 262:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 919              		.loc 1 262 3 is_stmt 1 view .LVU311
 262:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 920              		.loc 1 262 36 is_stmt 0 view .LVU312
 921 004e 4FF48063 		mov	r3, #1024
 922 0052 0A93     		str	r3, [sp, #40]
 263:Core/Src/main.c **** 
 923              		.loc 1 263 3 is_stmt 1 view .LVU313
 263:Core/Src/main.c **** 
 924              		.loc 1 263 36 is_stmt 0 view .LVU314
 925 0054 0B93     		str	r3, [sp, #44]
 265:Core/Src/main.c ****   {
 926              		.loc 1 265 3 is_stmt 1 view .LVU315
 265:Core/Src/main.c ****   {
 927              		.loc 1 265 7 is_stmt 0 view .LVU316
 928 0056 0121     		movs	r1, #1
 929 0058 07A8     		add	r0, sp, #28
 930 005a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 931              	.LVL43:
 265:Core/Src/main.c ****   {
 932              		.loc 1 265 6 view .LVU317
 933 005e 70B9     		cbnz	r0, .L67
 269:Core/Src/main.c ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 934              		.loc 1 269 3 is_stmt 1 view .LVU318
 269:Core/Src/main.c ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 935              		.loc 1 269 38 is_stmt 0 view .LVU319
 936 0060 4FF48153 		mov	r3, #4128
 937 0064 0193     		str	r3, [sp, #4]
 270:Core/Src/main.c ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 938              		.loc 1 270 3 is_stmt 1 view .LVU320
 270:Core/Src/main.c ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 939              		.loc 1 270 36 is_stmt 0 view .LVU321
 940 0066 0023     		movs	r3, #0
 941 0068 0493     		str	r3, [sp, #16]
 271:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
ARM GAS  /tmp/ccGMsmZ9.s 			page 35


 942              		.loc 1 271 3 is_stmt 1 view .LVU322
 271:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 943              		.loc 1 271 36 is_stmt 0 view .LVU323
 944 006a 0693     		str	r3, [sp, #24]
 272:Core/Src/main.c ****   {
 945              		.loc 1 272 3 is_stmt 1 view .LVU324
 272:Core/Src/main.c ****   {
 946              		.loc 1 272 7 is_stmt 0 view .LVU325
 947 006c 01A8     		add	r0, sp, #4
 948 006e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 949              	.LVL44:
 272:Core/Src/main.c ****   {
 950              		.loc 1 272 6 view .LVU326
 951 0072 30B9     		cbnz	r0, .L68
 276:Core/Src/main.c **** 
 952              		.loc 1 276 1 view .LVU327
 953 0074 17B0     		add	sp, sp, #92
 954              		.cfi_remember_state
 955              		.cfi_def_cfa_offset 4
 956              		@ sp needed
 957 0076 5DF804FB 		ldr	pc, [sp], #4
 958              	.L66:
 959              		.cfi_restore_state
 254:Core/Src/main.c ****   }
 960              		.loc 1 254 5 is_stmt 1 view .LVU328
 961 007a FFF7FEFF 		bl	Error_Handler
 962              	.LVL45:
 963              	.L67:
 267:Core/Src/main.c ****   }
 964              		.loc 1 267 5 view .LVU329
 965 007e FFF7FEFF 		bl	Error_Handler
 966              	.LVL46:
 967              	.L68:
 274:Core/Src/main.c ****   }
 968              		.loc 1 274 5 view .LVU330
 969 0082 FFF7FEFF 		bl	Error_Handler
 970              	.LVL47:
 971              		.cfi_endproc
 972              	.LFE124:
 974              		.global	__aeabi_ui2d
 975              		.global	__aeabi_ddiv
 976              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 977              		.align	2
 978              	.LC0:
 979 0000 256C640D 		.ascii	"%ld\015\012\000"
 979      0A00
 980              		.section	.text.main,"ax",%progbits
 981              		.align	1
 982              		.global	main
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 987              	main:
 988              	.LFB123:
  90:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 989              		.loc 1 90 1 view -0
 990              		.cfi_startproc
ARM GAS  /tmp/ccGMsmZ9.s 			page 36


 991              		@ args = 0, pretend = 0, frame = 384
 992              		@ frame_needed = 0, uses_anonymous_args = 0
 993 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 994              		.cfi_def_cfa_offset 28
 995              		.cfi_offset 4, -28
 996              		.cfi_offset 5, -24
 997              		.cfi_offset 6, -20
 998              		.cfi_offset 7, -16
 999              		.cfi_offset 8, -12
 1000              		.cfi_offset 9, -8
 1001              		.cfi_offset 14, -4
 1002 0004 2DED048B 		vpush.64	{d8, d9}
 1003              		.cfi_def_cfa_offset 44
 1004              		.cfi_offset 80, -44
 1005              		.cfi_offset 81, -40
 1006              		.cfi_offset 82, -36
 1007              		.cfi_offset 83, -32
 1008 0008 E3B0     		sub	sp, sp, #396
 1009              		.cfi_def_cfa_offset 440
  92:Core/Src/main.c **** 	volatile HAL_StatusTypeDef stat;
 1010              		.loc 1 92 2 view .LVU332
 1011              	.LVL48:
  93:Core/Src/main.c **** 
 1012              		.loc 1 93 2 view .LVU333
 100:Core/Src/main.c **** 
 1013              		.loc 1 100 3 view .LVU334
 1014 000a FFF7FEFF 		bl	HAL_Init
 1015              	.LVL49:
 108:Core/Src/main.c **** 
 1016              		.loc 1 108 3 view .LVU335
 1017 000e FFF7FEFF 		bl	SystemClock_Config
 1018              	.LVL50:
 115:Core/Src/main.c ****   MX_TIM1_Init();
 1019              		.loc 1 115 3 view .LVU336
 1020 0012 FFF7FEFF 		bl	MX_GPIO_Init
 1021              	.LVL51:
 116:Core/Src/main.c ****   MX_I2C1_Init();
 1022              		.loc 1 116 3 view .LVU337
 1023 0016 FFF7FEFF 		bl	MX_TIM1_Init
 1024              	.LVL52:
 117:Core/Src/main.c ****   MX_USART2_UART_Init();
 1025              		.loc 1 117 3 view .LVU338
 1026 001a FFF7FEFF 		bl	MX_I2C1_Init
 1027              	.LVL53:
 118:Core/Src/main.c ****   MX_SPI1_Init();
 1028              		.loc 1 118 3 view .LVU339
 1029 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 1030              	.LVL54:
 119:Core/Src/main.c ****   MX_TIM2_Init();
 1031              		.loc 1 119 3 view .LVU340
 1032 0022 FFF7FEFF 		bl	MX_SPI1_Init
 1033              	.LVL55:
 120:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1034              		.loc 1 120 3 view .LVU341
 1035 0026 FFF7FEFF 		bl	MX_TIM2_Init
 1036              	.LVL56:
 122:Core/Src/main.c **** 
ARM GAS  /tmp/ccGMsmZ9.s 			page 37


 1037              		.loc 1 122 3 view .LVU342
 1038 002a 9348     		ldr	r0, .L75+88
 1039 002c FFF7FEFF 		bl	HAL_TIM_Base_Start
 1040              	.LVL57:
 133:Core/Src/main.c ****   /*while (bno055_convert_double_euler_hpr_deg(&orientation_data) != BNO055_SUCCESS) {
 1041              		.loc 1 133 3 view .LVU343
 146:Core/Src/main.c ****   float Kip = 0;
 1042              		.loc 1 146 3 view .LVU344
 147:Core/Src/main.c ****   float Kdp = 55;
 1043              		.loc 1 147 3 view .LVU345
 148:Core/Src/main.c **** 
 1044              		.loc 1 148 3 view .LVU346
 150:Core/Src/main.c ****   float Kir = 0;
 1045              		.loc 1 150 3 view .LVU347
 151:Core/Src/main.c ****   float Kdr = 80;
 1046              		.loc 1 151 3 view .LVU348
 152:Core/Src/main.c **** 
 1047              		.loc 1 152 3 view .LVU349
 154:Core/Src/main.c ****   float Kie = 0;
 1048              		.loc 1 154 3 view .LVU350
 155:Core/Src/main.c ****   float Kde = 0;
 1049              		.loc 1 155 3 view .LVU351
 156:Core/Src/main.c **** 
 1050              		.loc 1 156 3 view .LVU352
 158:Core/Src/main.c ****   PID_TypeDef xPID;
 1051              		.loc 1 158 3 view .LVU353
 159:Core/Src/main.c ****   PID_TypeDef yPID;
 1052              		.loc 1 159 3 view .LVU354
 160:Core/Src/main.c **** 
 1053              		.loc 1 160 3 view .LVU355
 162:Core/Src/main.c ****   xSetpoint = orientation_data.p;
 1054              		.loc 1 162 3 view .LVU356
 163:Core/Src/main.c ****   ySetpoint = orientation_data.r;
 1055              		.loc 1 163 3 view .LVU357
 163:Core/Src/main.c ****   ySetpoint = orientation_data.r;
 1056              		.loc 1 163 13 is_stmt 0 view .LVU358
 1057 0030 DDE95E23 		ldrd	r2, [sp, #376]
 1058 0034 CDE90423 		strd	r2, [sp, #16]
 164:Core/Src/main.c **** 
 1059              		.loc 1 164 3 is_stmt 1 view .LVU359
 164:Core/Src/main.c **** 
 1060              		.loc 1 164 13 is_stmt 0 view .LVU360
 1061 0038 DDE95C23 		ldrd	r2, [sp, #368]
 1062 003c CDE90223 		strd	r2, [sp, #8]
 166:Core/Src/main.c ****   PID_SetMode(&xPID, _PID_MODE_AUTOMATIC);
 1063              		.loc 1 166 3 is_stmt 1 view .LVU361
 1064 0040 9FED778B 		vldr.64	d8, .L75
 1065 0044 4FF00009 		mov	r9, #0
 1066 0048 CDF80490 		str	r9, [sp, #4]
 1067 004c 4FF00108 		mov	r8, #1
 1068 0050 CDF80080 		str	r8, [sp]
 1069 0054 9FED742B 		vldr.64	d2, .L75+8
 1070 0058 B0EE481A 		vmov.f32	s2, s16
 1071 005c F0EE681A 		vmov.f32	s3, s17
 1072 0060 9FED730B 		vldr.64	d0, .L75+16
 1073 0064 04AB     		add	r3, sp, #16
 1074 0066 854A     		ldr	r2, .L75+92
ARM GAS  /tmp/ccGMsmZ9.s 			page 38


 1075 0068 5EA9     		add	r1, sp, #376
 1076 006a 22A8     		add	r0, sp, #136
 1077 006c FFF7FEFF 		bl	PID
 1078              	.LVL58:
 167:Core/Src/main.c ****   PID_SetSampleTime(&xPID, 10);
 1079              		.loc 1 167 3 view .LVU362
 1080 0070 4146     		mov	r1, r8
 1081 0072 22A8     		add	r0, sp, #136
 1082 0074 FFF7FEFF 		bl	PID_SetMode
 1083              	.LVL59:
 168:Core/Src/main.c ****   PID_SetOutputLimits(&xPID, -10922.5, 10992.5);
 1084              		.loc 1 168 3 view .LVU363
 1085 0078 0A21     		movs	r1, #10
 1086 007a 22A8     		add	r0, sp, #136
 1087 007c FFF7FEFF 		bl	PID_SetSampleTime
 1088              	.LVL60:
 169:Core/Src/main.c **** 
 1089              		.loc 1 169 3 view .LVU364
 1090 0080 9FED6D9B 		vldr.64	d9, .L75+24
 1091 0084 9FED6E1B 		vldr.64	d1, .L75+32
 1092 0088 B0EE490A 		vmov.f32	s0, s18
 1093 008c F0EE690A 		vmov.f32	s1, s19
 1094 0090 22A8     		add	r0, sp, #136
 1095 0092 FFF7FEFF 		bl	PID_SetOutputLimits
 1096              	.LVL61:
 171:Core/Src/main.c ****   PID_SetMode(&yPID, _PID_MODE_AUTOMATIC);
 1097              		.loc 1 171 3 view .LVU365
 1098 0096 CDF80490 		str	r9, [sp, #4]
 1099 009a CDF80080 		str	r8, [sp]
 1100 009e 9FED6A2B 		vldr.64	d2, .L75+40
 1101 00a2 B0EE481A 		vmov.f32	s2, s16
 1102 00a6 F0EE681A 		vmov.f32	s3, s17
 1103 00aa 9FED690B 		vldr.64	d0, .L75+48
 1104 00ae 02AB     		add	r3, sp, #8
 1105 00b0 734A     		ldr	r2, .L75+96
 1106 00b2 5CA9     		add	r1, sp, #368
 1107 00b4 06A8     		add	r0, sp, #24
 1108 00b6 FFF7FEFF 		bl	PID
 1109              	.LVL62:
 172:Core/Src/main.c ****   PID_SetSampleTime(&yPID, 10);
 1110              		.loc 1 172 3 view .LVU366
 1111 00ba 4146     		mov	r1, r8
 1112 00bc 06A8     		add	r0, sp, #24
 1113 00be FFF7FEFF 		bl	PID_SetMode
 1114              	.LVL63:
 173:Core/Src/main.c ****   PID_SetOutputLimits(&yPID, -10922.5, 10922.5);
 1115              		.loc 1 173 3 view .LVU367
 1116 00c2 0A21     		movs	r1, #10
 1117 00c4 06A8     		add	r0, sp, #24
 1118 00c6 FFF7FEFF 		bl	PID_SetSampleTime
 1119              	.LVL64:
 174:Core/Src/main.c **** 
 1120              		.loc 1 174 3 view .LVU368
 1121 00ca 9FED631B 		vldr.64	d1, .L75+56
 1122 00ce B0EE490A 		vmov.f32	s0, s18
 1123 00d2 F0EE690A 		vmov.f32	s1, s19
 1124 00d6 06A8     		add	r0, sp, #24
ARM GAS  /tmp/ccGMsmZ9.s 			page 39


 1125 00d8 FFF7FEFF 		bl	PID_SetOutputLimits
 1126              	.LVL65:
 176:Core/Src/main.c ****   PID(&escPID, &esc_rpm, &esc_output, &esc_speed, Kpe, Kie, Kde, _PID_P_ON_E, _PID_CD_DIRECT);
 1127              		.loc 1 176 3 view .LVU369
 176:Core/Src/main.c ****   PID(&escPID, &esc_rpm, &esc_output, &esc_speed, Kpe, Kie, Kde, _PID_P_ON_E, _PID_CD_DIRECT);
 1128              		.loc 1 176 13 is_stmt 0 view .LVU370
 1129 00dc 694B     		ldr	r3, .L75+100
 1130 00de 60A1     		adr	r1, .L75+64
 1131 00e0 D1E90001 		ldrd	r0, [r1]
 1132 00e4 C3E90001 		strd	r0, [r3]
 177:Core/Src/main.c ****   PID_SetMode(&escPID, _PID_MODE_AUTOMATIC);
 1133              		.loc 1 177 3 is_stmt 1 view .LVU371
 1134 00e8 9FED5F9B 		vldr.64	d9, .L75+72
 1135 00ec CDF80490 		str	r9, [sp, #4]
 1136 00f0 CDF80080 		str	r8, [sp]
 1137 00f4 B0EE482A 		vmov.f32	s4, s16
 1138 00f8 F0EE682A 		vmov.f32	s5, s17
 1139 00fc B0EE481A 		vmov.f32	s2, s16
 1140 0100 F0EE681A 		vmov.f32	s3, s17
 1141 0104 B0EE490A 		vmov.f32	s0, s18
 1142 0108 F0EE690A 		vmov.f32	s1, s19
 1143 010c 5E4A     		ldr	r2, .L75+104
 1144 010e 5F49     		ldr	r1, .L75+108
 1145 0110 3EA8     		add	r0, sp, #248
 1146 0112 FFF7FEFF 		bl	PID
 1147              	.LVL66:
 178:Core/Src/main.c ****   PID_SetSampleTime(&escPID, 10);
 1148              		.loc 1 178 3 view .LVU372
 1149 0116 4146     		mov	r1, r8
 1150 0118 3EA8     		add	r0, sp, #248
 1151 011a FFF7FEFF 		bl	PID_SetMode
 1152              	.LVL67:
 179:Core/Src/main.c ****   PID_SetOutputLimits(&escPID, 0.0, 1.0);
 1153              		.loc 1 179 3 view .LVU373
 1154 011e 0A21     		movs	r1, #10
 1155 0120 3EA8     		add	r0, sp, #248
 1156 0122 FFF7FEFF 		bl	PID_SetSampleTime
 1157              	.LVL68:
 180:Core/Src/main.c **** 
 1158              		.loc 1 180 3 view .LVU374
 1159 0126 B0EE491A 		vmov.f32	s2, s18
 1160 012a F0EE691A 		vmov.f32	s3, s19
 1161 012e B0EE480A 		vmov.f32	s0, s16
 1162 0132 F0EE680A 		vmov.f32	s1, s17
 1163 0136 3EA8     		add	r0, sp, #248
 1164 0138 FFF7FEFF 		bl	PID_SetOutputLimits
 1165              	.LVL69:
 182:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 1166              		.loc 1 182 3 view .LVU375
 1167 013c DFF85C81 		ldr	r8, .L75+124
 1168 0140 4046     		mov	r0, r8
 1169 0142 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1170              	.LVL70:
 183:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 1171              		.loc 1 183 3 view .LVU376
 1172 0146 4946     		mov	r1, r9
 1173 0148 4046     		mov	r0, r8
ARM GAS  /tmp/ccGMsmZ9.s 			page 40


 1174 014a FFF7FEFF 		bl	HAL_TIM_OC_Start_IT
 1175              	.LVL71:
 184:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
 1176              		.loc 1 184 3 view .LVU377
 1177 014e 0421     		movs	r1, #4
 1178 0150 4046     		mov	r0, r8
 1179 0152 FFF7FEFF 		bl	HAL_TIM_OC_Start_IT
 1180              	.LVL72:
 185:Core/Src/main.c ****   //HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 1181              		.loc 1 185 3 view .LVU378
 1182 0156 0821     		movs	r1, #8
 1183 0158 4046     		mov	r0, r8
 1184 015a FFF7FEFF 		bl	HAL_TIM_OC_Start_IT
 1185              	.LVL73:
 188:Core/Src/main.c ****   while (HAL_GetTick() - t < 3000) {
 1186              		.loc 1 188 3 view .LVU379
 188:Core/Src/main.c ****   while (HAL_GetTick() - t < 3000) {
 1187              		.loc 1 188 7 is_stmt 0 view .LVU380
 1188 015e FFF7FEFF 		bl	HAL_GetTick
 1189              	.LVL74:
 1190 0162 8046     		mov	r8, r0
 1191              	.LVL75:
 189:Core/Src/main.c **** 
 1192              		.loc 1 189 3 is_stmt 1 view .LVU381
 1193              	.L70:
 191:Core/Src/main.c ****   /*
 1194              		.loc 1 191 3 discriminator 1 view .LVU382
 189:Core/Src/main.c **** 
 1195              		.loc 1 189 28 discriminator 1 view .LVU383
 189:Core/Src/main.c **** 
 1196              		.loc 1 189 10 is_stmt 0 discriminator 1 view .LVU384
 1197 0164 FFF7FEFF 		bl	HAL_GetTick
 1198              	.LVL76:
 189:Core/Src/main.c **** 
 1199              		.loc 1 189 24 discriminator 1 view .LVU385
 1200 0168 A0EB0800 		sub	r0, r0, r8
 189:Core/Src/main.c **** 
 1201              		.loc 1 189 28 discriminator 1 view .LVU386
 1202 016c 40F6B733 		movw	r3, #2999
 1203 0170 9842     		cmp	r0, r3
 1204 0172 F7D9     		bls	.L70
 197:Core/Src/main.c ****   t = HAL_GetTick();
 1205              		.loc 1 197 3 is_stmt 1 view .LVU387
 197:Core/Src/main.c ****   t = HAL_GetTick();
 1206              		.loc 1 197 14 is_stmt 0 view .LVU388
 1207 0174 444B     		ldr	r3, .L75+104
 1208 0176 3AA1     		adr	r1, .L75+64
 1209 0178 D1E90001 		ldrd	r0, [r1]
 1210 017c C3E90001 		strd	r0, [r3]
 198:Core/Src/main.c ****   while (HAL_GetTick() - t < 500) {
 1211              		.loc 1 198 3 is_stmt 1 view .LVU389
 198:Core/Src/main.c ****   while (HAL_GetTick() - t < 500) {
 1212              		.loc 1 198 7 is_stmt 0 view .LVU390
 1213 0180 FFF7FEFF 		bl	HAL_GetTick
 1214              	.LVL77:
 1215 0184 8046     		mov	r8, r0
 1216              	.LVL78:
ARM GAS  /tmp/ccGMsmZ9.s 			page 41


 199:Core/Src/main.c **** 
 1217              		.loc 1 199 3 is_stmt 1 view .LVU391
 1218              	.L71:
 201:Core/Src/main.c ****   //HAL_UART_Receive_DMA(&huart2, serial_input, 1);
 1219              		.loc 1 201 3 discriminator 1 view .LVU392
 199:Core/Src/main.c **** 
 1220              		.loc 1 199 28 discriminator 1 view .LVU393
 199:Core/Src/main.c **** 
 1221              		.loc 1 199 10 is_stmt 0 discriminator 1 view .LVU394
 1222 0186 FFF7FEFF 		bl	HAL_GetTick
 1223              	.LVL79:
 199:Core/Src/main.c **** 
 1224              		.loc 1 199 24 discriminator 1 view .LVU395
 1225 018a A0EB0800 		sub	r0, r0, r8
 199:Core/Src/main.c **** 
 1226              		.loc 1 199 28 discriminator 1 view .LVU396
 1227 018e B0F5FA7F 		cmp	r0, #500
 1228 0192 F8D3     		bcc	.L71
 1229              	.LVL80:
 1230              	.L72:
 1231              	.LBB8:
 212:Core/Src/main.c **** 	  orientation_data.p = -fabs(orientation_data.p); // Fix pitch orientation
 1232              		.loc 1 212 4 is_stmt 1 discriminator 1 view .LVU397
 210:Core/Src/main.c **** 
 1233              		.loc 1 210 66 discriminator 1 view .LVU398
 210:Core/Src/main.c **** 
 1234              		.loc 1 210 11 is_stmt 0 discriminator 1 view .LVU399
 1235 0194 5AA8     		add	r0, sp, #360
 1236 0196 FFF7FEFF 		bl	bno055_convert_double_euler_hpr_deg
 1237              	.LVL81:
 210:Core/Src/main.c **** 
 1238              		.loc 1 210 66 discriminator 1 view .LVU400
 1239 019a 0028     		cmp	r0, #0
 1240 019c FAD1     		bne	.L72
 212:Core/Src/main.c **** 	  orientation_data.p = -fabs(orientation_data.p); // Fix pitch orientation
 1241              		.loc 1 212 5 is_stmt 1 view .LVU401
 213:Core/Src/main.c ****     esc_rpm = (1.0 / rpm_length) / 3000.0;
 1242              		.loc 1 213 4 view .LVU402
 213:Core/Src/main.c ****     esc_rpm = (1.0 / rpm_length) / 3000.0;
 1243              		.loc 1 213 47 is_stmt 0 view .LVU403
 1244 019e DDE95E23 		ldrd	r2, [sp, #376]
 213:Core/Src/main.c ****     esc_rpm = (1.0 / rpm_length) / 3000.0;
 1245              		.loc 1 213 26 view .LVU404
 1246 01a2 23F00045 		bic	r5, r3, #-2147483648
 213:Core/Src/main.c ****     esc_rpm = (1.0 / rpm_length) / 3000.0;
 1247              		.loc 1 213 25 view .LVU405
 1248 01a6 1646     		mov	r6, r2
 1249 01a8 05F10047 		add	r7, r5, #-2147483648
 213:Core/Src/main.c ****     esc_rpm = (1.0 / rpm_length) / 3000.0;
 1250              		.loc 1 213 23 view .LVU406
 1251 01ac CDE95E67 		strd	r6, [sp, #376]
 214:Core/Src/main.c **** 
 1252              		.loc 1 214 5 is_stmt 1 view .LVU407
 214:Core/Src/main.c **** 
 1253              		.loc 1 214 20 is_stmt 0 view .LVU408
 1254 01b0 DFF8EC90 		ldr	r9, .L75+128
 1255 01b4 D9F80000 		ldr	r0, [r9]
ARM GAS  /tmp/ccGMsmZ9.s 			page 42


 1256 01b8 FFF7FEFF 		bl	__aeabi_ui2d
 1257              	.LVL82:
 1258 01bc 0246     		mov	r2, r0
 1259 01be 0B46     		mov	r3, r1
 1260 01c0 0020     		movs	r0, #0
 1261 01c2 3349     		ldr	r1, .L75+112
 1262 01c4 FFF7FEFF 		bl	__aeabi_ddiv
 1263              	.LVL83:
 214:Core/Src/main.c **** 
 1264              		.loc 1 214 34 view .LVU409
 1265 01c8 29A3     		adr	r3, .L75+80
 1266 01ca D3E90023 		ldrd	r2, [r3]
 1267 01ce FFF7FEFF 		bl	__aeabi_ddiv
 1268              	.LVL84:
 214:Core/Src/main.c **** 
 1269              		.loc 1 214 13 view .LVU410
 1270 01d2 2E4B     		ldr	r3, .L75+108
 1271 01d4 C3E90001 		strd	r0, [r3]
 216:Core/Src/main.c **** 	  PID_Compute(&xPID);
 1272              		.loc 1 216 4 is_stmt 1 view .LVU411
 1273 01d8 1920     		movs	r0, #25
 1274 01da FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1275              	.LVL85:
 217:Core/Src/main.c **** 	  PID_Compute(&yPID);
 1276              		.loc 1 217 4 view .LVU412
 1277 01de 22A8     		add	r0, sp, #136
 1278 01e0 FFF7FEFF 		bl	PID_Compute
 1279              	.LVL86:
 218:Core/Src/main.c ****     PID_Compute(&escPID);
 1280              		.loc 1 218 4 view .LVU413
 1281 01e4 06A8     		add	r0, sp, #24
 1282 01e6 FFF7FEFF 		bl	PID_Compute
 1283              	.LVL87:
 219:Core/Src/main.c ****     
 1284              		.loc 1 219 5 view .LVU414
 1285 01ea 3EA8     		add	r0, sp, #248
 1286 01ec FFF7FEFF 		bl	PID_Compute
 1287              	.LVL88:
 221:Core/Src/main.c ****     stat = HAL_UART_Transmit(&huart2, serial_output, 60, 1000);
 1288              		.loc 1 221 5 view .LVU415
 1289 01f0 DFF8B080 		ldr	r8, .L75+132
 1290 01f4 D9F80020 		ldr	r2, [r9]
 1291 01f8 2649     		ldr	r1, .L75+116
 1292 01fa 4046     		mov	r0, r8
 1293 01fc FFF7FEFF 		bl	sprintf
 1294              	.LVL89:
 222:Core/Src/main.c ****     
 1295              		.loc 1 222 5 view .LVU416
 222:Core/Src/main.c ****     
 1296              		.loc 1 222 12 is_stmt 0 view .LVU417
 1297 0200 4FF47A73 		mov	r3, #1000
 1298 0204 3C22     		movs	r2, #60
 1299 0206 4146     		mov	r1, r8
 1300 0208 2348     		ldr	r0, .L75+120
 1301 020a FFF7FEFF 		bl	HAL_UART_Transmit
 1302              	.LVL90:
 222:Core/Src/main.c ****     
ARM GAS  /tmp/ccGMsmZ9.s 			page 43


 1303              		.loc 1 222 10 view .LVU418
 1304 020e 8DF88701 		strb	r0, [sp, #391]
 224:Core/Src/main.c ****     
 1305              		.loc 1 224 4 is_stmt 1 view .LVU419
 1306 0212 1920     		movs	r0, #25
 1307 0214 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1308              	.LVL91:
 1309              	.LBE8:
 208:Core/Src/main.c ****   {
 1310              		.loc 1 208 9 view .LVU420
 209:Core/Src/main.c **** 	  while (bno055_convert_double_euler_hpr_deg(&orientation_data) != BNO055_SUCCESS) {
 1311              		.loc 1 209 3 is_stmt 0 view .LVU421
 1312 0218 BCE7     		b	.L72
 1313              	.L76:
 1314 021a 00BFAFF3 		.align	3
 1314      0080
 1315              	.L75:
 1316 0220 00000000 		.word	0
 1317 0224 00000000 		.word	0
 1318 0228 00000000 		.word	0
 1319 022c 00804B40 		.word	1078689792
 1320 0230 00000000 		.word	0
 1321 0234 00805B40 		.word	1079738368
 1322 0238 00000000 		.word	0
 1323 023c 4055C5C0 		.word	-1060809408
 1324 0240 00000000 		.word	0
 1325 0244 4078C540 		.word	1086683200
 1326 0248 00000000 		.word	0
 1327 024c 00005440 		.word	1079246848
 1328 0250 00000000 		.word	0
 1329 0254 00006440 		.word	1080295424
 1330 0258 00000000 		.word	0
 1331 025c 4055C540 		.word	1086674240
 1332 0260 33333333 		.word	858993459
 1333 0264 3333D33F 		.word	1070805811
 1334 0268 00000000 		.word	0
 1335 026c 0000F03F 		.word	1072693248
 1336 0270 00000000 		.word	0
 1337 0274 0070A740 		.word	1084715008
 1338 0278 00000000 		.word	htim2
 1339 027c 00000000 		.word	xout
 1340 0280 00000000 		.word	yout
 1341 0284 00000000 		.word	esc_speed
 1342 0288 00000000 		.word	esc_output
 1343 028c 00000000 		.word	esc_rpm
 1344 0290 0000F03F 		.word	1072693248
 1345 0294 00000000 		.word	.LC0
 1346 0298 00000000 		.word	huart2
 1347 029c 00000000 		.word	htim1
 1348 02a0 00000000 		.word	rpm_length
 1349 02a4 00000000 		.word	serial_output
 1350              		.cfi_endproc
 1351              	.LFE123:
 1353              		.global	rpm_length
 1354              		.section	.bss.rpm_length,"aw",%nobits
 1355              		.align	2
 1358              	rpm_length:
ARM GAS  /tmp/ccGMsmZ9.s 			page 44


 1359 0000 00000000 		.space	4
 1360              		.global	serial_output
 1361              		.section	.bss.serial_output,"aw",%nobits
 1362              		.align	2
 1365              	serial_output:
 1366 0000 00000000 		.space	60
 1366      00000000 
 1366      00000000 
 1366      00000000 
 1366      00000000 
 1367              		.global	yout
 1368              		.section	.bss.yout,"aw",%nobits
 1369              		.align	3
 1372              	yout:
 1373 0000 00000000 		.space	8
 1373      00000000 
 1374              		.global	xout
 1375              		.section	.bss.xout,"aw",%nobits
 1376              		.align	3
 1379              	xout:
 1380 0000 00000000 		.space	8
 1380      00000000 
 1381              		.global	esc_output
 1382              		.section	.bss.esc_output,"aw",%nobits
 1383              		.align	3
 1386              	esc_output:
 1387 0000 00000000 		.space	8
 1387      00000000 
 1388              		.global	esc_rpm
 1389              		.section	.bss.esc_rpm,"aw",%nobits
 1390              		.align	3
 1393              	esc_rpm:
 1394 0000 00000000 		.space	8
 1394      00000000 
 1395              		.global	esc_speed
 1396              		.section	.bss.esc_speed,"aw",%nobits
 1397              		.align	3
 1400              	esc_speed:
 1401 0000 00000000 		.space	8
 1401      00000000 
 1402              		.global	adc_value
 1403              		.section	.bss.adc_value,"aw",%nobits
 1404              		.align	2
 1407              	adc_value:
 1408 0000 00000000 		.space	4
 1409              		.global	imu
 1410              		.section	.bss.imu,"aw",%nobits
 1411              		.align	2
 1414              	imu:
 1415 0000 00000000 		.space	24
 1415      00000000 
 1415      00000000 
 1415      00000000 
 1415      00000000 
 1416              		.global	ret
 1417              		.section	.bss.ret,"aw",%nobits
 1420              	ret:
ARM GAS  /tmp/ccGMsmZ9.s 			page 45


 1421 0000 00       		.space	1
 1422              		.global	buf
 1423              		.section	.bss.buf,"aw",%nobits
 1424              		.align	2
 1427              	buf:
 1428 0000 000000   		.space	3
 1429              		.global	huart2
 1430              		.section	.bss.huart2,"aw",%nobits
 1431              		.align	2
 1434              	huart2:
 1435 0000 00000000 		.space	132
 1435      00000000 
 1435      00000000 
 1435      00000000 
 1435      00000000 
 1436              		.global	htim2
 1437              		.section	.bss.htim2,"aw",%nobits
 1438              		.align	2
 1441              	htim2:
 1442 0000 00000000 		.space	76
 1442      00000000 
 1442      00000000 
 1442      00000000 
 1442      00000000 
 1443              		.global	htim1
 1444              		.section	.bss.htim1,"aw",%nobits
 1445              		.align	2
 1448              	htim1:
 1449 0000 00000000 		.space	76
 1449      00000000 
 1449      00000000 
 1449      00000000 
 1449      00000000 
 1450              		.global	hspi1
 1451              		.section	.bss.hspi1,"aw",%nobits
 1452              		.align	2
 1455              	hspi1:
 1456 0000 00000000 		.space	100
 1456      00000000 
 1456      00000000 
 1456      00000000 
 1456      00000000 
 1457              		.global	hi2c1
 1458              		.section	.bss.hi2c1,"aw",%nobits
 1459              		.align	2
 1462              	hi2c1:
 1463 0000 00000000 		.space	76
 1463      00000000 
 1463      00000000 
 1463      00000000 
 1463      00000000 
 1464              		.text
 1465              	.Letext0:
 1466              		.file 3 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 1467              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1468              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1469              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
ARM GAS  /tmp/ccGMsmZ9.s 			page 46


 1470              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 1471              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 1472              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 1473              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1474              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 1475              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
 1476              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 1477              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1478              		.file 15 "Core/Inc/bno055.h"
 1479              		.file 16 "Core/Inc/pid.h"
 1480              		.file 17 "Core/Inc/main.h"
 1481              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h"
 1482              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 1483              		.file 20 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 1484              		.file 21 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 1485              		.file 22 "<built-in>"
ARM GAS  /tmp/ccGMsmZ9.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccGMsmZ9.s:21     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccGMsmZ9.s:26     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccGMsmZ9.s:143    .text.MX_GPIO_Init:0000000000000084 $d
     /tmp/ccGMsmZ9.s:149    .text.Error_Handler:0000000000000000 $t
     /tmp/ccGMsmZ9.s:155    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccGMsmZ9.s:187    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccGMsmZ9.s:192    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccGMsmZ9.s:468    .text.MX_TIM1_Init:0000000000000128 $d
     /tmp/ccGMsmZ9.s:1448   .bss.htim1:0000000000000000 htim1
     /tmp/ccGMsmZ9.s:474    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccGMsmZ9.s:479    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccGMsmZ9.s:560    .text.MX_I2C1_Init:0000000000000048 $d
     /tmp/ccGMsmZ9.s:1462   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccGMsmZ9.s:567    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccGMsmZ9.s:572    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccGMsmZ9.s:637    .text.MX_USART2_UART_Init:0000000000000038 $d
     /tmp/ccGMsmZ9.s:1434   .bss.huart2:0000000000000000 huart2
     /tmp/ccGMsmZ9.s:643    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccGMsmZ9.s:648    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccGMsmZ9.s:724    .text.MX_SPI1_Init:0000000000000044 $d
     /tmp/ccGMsmZ9.s:1455   .bss.hspi1:0000000000000000 hspi1
     /tmp/ccGMsmZ9.s:730    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccGMsmZ9.s:735    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccGMsmZ9.s:835    .text.MX_TIM2_Init:0000000000000064 $d
     /tmp/ccGMsmZ9.s:1441   .bss.htim2:0000000000000000 htim2
     /tmp/ccGMsmZ9.s:840    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccGMsmZ9.s:846    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccGMsmZ9.s:977    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccGMsmZ9.s:981    .text.main:0000000000000000 $t
     /tmp/ccGMsmZ9.s:987    .text.main:0000000000000000 main
     /tmp/ccGMsmZ9.s:1316   .text.main:0000000000000220 $d
     /tmp/ccGMsmZ9.s:1379   .bss.xout:0000000000000000 xout
     /tmp/ccGMsmZ9.s:1372   .bss.yout:0000000000000000 yout
     /tmp/ccGMsmZ9.s:1400   .bss.esc_speed:0000000000000000 esc_speed
     /tmp/ccGMsmZ9.s:1386   .bss.esc_output:0000000000000000 esc_output
     /tmp/ccGMsmZ9.s:1393   .bss.esc_rpm:0000000000000000 esc_rpm
     /tmp/ccGMsmZ9.s:1358   .bss.rpm_length:0000000000000000 rpm_length
     /tmp/ccGMsmZ9.s:1365   .bss.serial_output:0000000000000000 serial_output
     /tmp/ccGMsmZ9.s:1355   .bss.rpm_length:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1362   .bss.serial_output:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1369   .bss.yout:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1376   .bss.xout:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1383   .bss.esc_output:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1390   .bss.esc_rpm:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1397   .bss.esc_speed:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1407   .bss.adc_value:0000000000000000 adc_value
     /tmp/ccGMsmZ9.s:1404   .bss.adc_value:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1414   .bss.imu:0000000000000000 imu
     /tmp/ccGMsmZ9.s:1411   .bss.imu:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1420   .bss.ret:0000000000000000 ret
     /tmp/ccGMsmZ9.s:1421   .bss.ret:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1427   .bss.buf:0000000000000000 buf
     /tmp/ccGMsmZ9.s:1424   .bss.buf:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1431   .bss.huart2:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1438   .bss.htim2:0000000000000000 $d
ARM GAS  /tmp/ccGMsmZ9.s 			page 48


     /tmp/ccGMsmZ9.s:1445   .bss.htim1:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1452   .bss.hspi1:0000000000000000 $d
     /tmp/ccGMsmZ9.s:1459   .bss.hi2c1:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_UART_Init
HAL_SPI_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_ui2d
__aeabi_ddiv
HAL_Init
HAL_TIM_Base_Start
PID
PID_SetMode
PID_SetSampleTime
PID_SetOutputLimits
HAL_TIM_Base_Start_IT
HAL_TIM_OC_Start_IT
HAL_GetTick
bno055_convert_double_euler_hpr_deg
HAL_NVIC_DisableIRQ
PID_Compute
sprintf
HAL_UART_Transmit
