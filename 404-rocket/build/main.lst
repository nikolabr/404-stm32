ARM GAS  /tmp/cc0SAFfQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB130:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/cc0SAFfQ.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** /* USER CODE END PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PM */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  42:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** UART_HandleTypeDef huart2;
  49:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_rx;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** uint8_t buf[3];
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** HAL_StatusTypeDef ret;
  55:Core/Src/main.c **** struct bno055_t imu;
  56:Core/Src/main.c **** uint8_t flag;
  57:Core/Src/main.c **** uint32_t adc_value;
  58:Core/Src/main.c **** uint16_t esc_speed = 0;
  59:Core/Src/main.c **** uint32_t esc_rpm;
  60:Core/Src/main.c **** double xout, yout;
  61:Core/Src/main.c **** unsigned char serial_input[20];
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE END PV */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  66:Core/Src/main.c **** void SystemClock_Config(void);
  67:Core/Src/main.c **** static void MX_GPIO_Init(void);
  68:Core/Src/main.c **** static void MX_TIM1_Init(void);
  69:Core/Src/main.c **** static void MX_I2C1_Init(void);
  70:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  71:Core/Src/main.c **** static void MX_DMA_Init(void);
  72:Core/Src/main.c **** static void MX_SPI1_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END PFP */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  78:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* USER CODE END 0 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /**
  83:Core/Src/main.c ****   * @brief  The application entry point.
  84:Core/Src/main.c ****   * @retval int
  85:Core/Src/main.c ****   */
  86:Core/Src/main.c **** int main(void)
  87:Core/Src/main.c **** {
  88:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
ARM GAS  /tmp/cc0SAFfQ.s 			page 3


  89:Core/Src/main.c **** 	uint32_t t = 0;
  90:Core/Src/main.c **** 	volatile HAL_StatusTypeDef stat;
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE END 1 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Core/Src/main.c ****   HAL_Init();
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END Init */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Configure the system clock */
 105:Core/Src/main.c ****   SystemClock_Config();
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE END SysInit */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Initialize all configured peripherals */
 112:Core/Src/main.c ****   MX_GPIO_Init();
 113:Core/Src/main.c ****   MX_TIM1_Init();
 114:Core/Src/main.c ****   MX_I2C1_Init();
 115:Core/Src/main.c ****   MX_USART2_UART_Init();
 116:Core/Src/main.c ****   MX_DMA_Init();
 117:Core/Src/main.c ****   MX_SPI1_Init();
 118:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /*imu.bus_read = BNO055_I2C_bus_read;
 121:Core/Src/main.c ****   imu.bus_write = BNO055_I2C_bus_write;
 122:Core/Src/main.c ****   imu.delay_msec = BNO055_delay_msek;
 123:Core/Src/main.c ****   imu.dev_addr = BNO055_I2C_ADDR1;
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   bno055_init(&imu);
 126:Core/Src/main.c ****   bno055_set_power_mode(BNO055_POWER_MODE_NORMAL);
 127:Core/Src/main.c ****   bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS);
 128:Core/Src/main.c **** */
 129:Core/Src/main.c ****   struct bno055_euler_double_t orientation_data;
 130:Core/Src/main.c ****   /*while (bno055_convert_double_euler_hpr_deg(&orientation_data) != BNO055_SUCCESS) {
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   };*/
 133:Core/Src/main.c ****   /*
 134:Core/Src/main.c ****   float Kpp = 160.0;
 135:Core/Src/main.c ****   float Kip = 0;
 136:Core/Src/main.c ****   float Kdp = 80;
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   float Kpr = 160.0;
 139:Core/Src/main.c ****   float Kir = 0;
 140:Core/Src/main.c ****   float Kdr = 80;*/
 141:Core/Src/main.c ****   //these are just absolute values, you have to correct directions in pid.c
 142:Core/Src/main.c ****   float Kpp = 110.0;
 143:Core/Src/main.c ****   float Kip = 0;
 144:Core/Src/main.c ****   float Kdp = 55;
 145:Core/Src/main.c **** 
ARM GAS  /tmp/cc0SAFfQ.s 			page 4


 146:Core/Src/main.c ****   float Kpr = 160.0;
 147:Core/Src/main.c ****   float Kir = 0;
 148:Core/Src/main.c ****   float Kdr = 80;
 149:Core/Src/main.c ****   PID_TypeDef xPID;
 150:Core/Src/main.c ****   PID_TypeDef yPID;
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   double xSetpoint, ySetpoint;
 153:Core/Src/main.c ****   xSetpoint = orientation_data.p;
 154:Core/Src/main.c ****   ySetpoint = orientation_data.r;
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   PID(&xPID, &orientation_data.p, &xout, &xSetpoint, Kpp, Kip, Kdp, _PID_P_ON_E, _PID_CD_DIRECT);
 157:Core/Src/main.c ****   PID_SetMode(&xPID, _PID_MODE_AUTOMATIC);
 158:Core/Src/main.c ****   PID_SetSampleTime(&xPID, 10);
 159:Core/Src/main.c ****   PID_SetOutputLimits(&xPID, -10922.5, 10992.5);
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   PID(&yPID, &orientation_data.r, &yout, &ySetpoint, Kpr, Kir, Kdr, _PID_P_ON_E, _PID_CD_DIRECT);
 162:Core/Src/main.c ****   PID_SetMode(&yPID, _PID_MODE_AUTOMATIC);
 163:Core/Src/main.c ****   PID_SetSampleTime(&yPID, 10);
 164:Core/Src/main.c ****   PID_SetOutputLimits(&yPID, -10922.5, 10922.5);
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim1);
 167:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 168:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 169:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
 170:Core/Src/main.c ****   //HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   t = HAL_GetTick();
 173:Core/Src/main.c ****   while (HAL_GetTick() - t < 3000) {
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   }
 176:Core/Src/main.c ****   for (int i = 0; i < 20; i++) {
 177:Core/Src/main.c ****     serial_input[i] = 0x00;
 178:Core/Src/main.c ****   }
 179:Core/Src/main.c ****   esc_speed = 114;
 180:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, serial_input, 10);
 181:Core/Src/main.c ****   //HAL_UART_Receive_DMA(&huart2, serial_input, 1);
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /* USER CODE END 2 */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* Infinite loop */
 186:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 187:Core/Src/main.c ****   while (1)
 188:Core/Src/main.c ****   {
 189:Core/Src/main.c **** 	  /*while (bno055_convert_double_euler_hpr_deg(&orientation_data) != BNO055_SUCCESS) {
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** 	  };*/
 192:Core/Src/main.c ****     esc_rpm = atoi(serial_input);
 193:Core/Src/main.c **** 	  orientation_data.p = -fabs(orientation_data.p); // Fix pitch orientation
 194:Core/Src/main.c **** 
 195:Core/Src/main.c **** 	  HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 196:Core/Src/main.c **** 	  PID_Compute(&xPID);
 197:Core/Src/main.c **** 	  PID_Compute(&yPID);
 198:Core/Src/main.c **** 	  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 199:Core/Src/main.c ****     
 200:Core/Src/main.c **** 	  /*if (HAL_GetTick() - t > 1000) {
 201:Core/Src/main.c **** 		  HAL_ADC_PollForConversion(&hadc1, 1);
 202:Core/Src/main.c **** 		  adc_value = HAL_ADC_GetValue(&hadc1);
ARM GAS  /tmp/cc0SAFfQ.s 			page 5


 203:Core/Src/main.c **** 		  t = HAL_GetTick();
 204:Core/Src/main.c **** 	  }*/
 205:Core/Src/main.c ****     /* USER CODE END WHILE */
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 208:Core/Src/main.c ****   }
 209:Core/Src/main.c ****   /* USER CODE END 3 */
 210:Core/Src/main.c **** }
 211:Core/Src/main.c **** 
 212:Core/Src/main.c **** /**
 213:Core/Src/main.c ****   * @brief System Clock Configuration
 214:Core/Src/main.c ****   * @retval None
 215:Core/Src/main.c ****   */
 216:Core/Src/main.c **** void SystemClock_Config(void)
 217:Core/Src/main.c **** {
 218:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 219:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 220:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 223:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 224:Core/Src/main.c ****   */
 225:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 226:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 227:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL11;
 231:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 238:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 239:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 240:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 241:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 242:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 245:Core/Src/main.c ****   {
 246:Core/Src/main.c ****     Error_Handler();
 247:Core/Src/main.c ****   }
 248:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 249:Core/Src/main.c ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 250:Core/Src/main.c ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 251:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 252:Core/Src/main.c ****   {
 253:Core/Src/main.c ****     Error_Handler();
 254:Core/Src/main.c ****   }
 255:Core/Src/main.c **** }
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** /**
 258:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 259:Core/Src/main.c ****   * @param None
ARM GAS  /tmp/cc0SAFfQ.s 			page 6


 260:Core/Src/main.c ****   * @retval None
 261:Core/Src/main.c ****   */
 262:Core/Src/main.c **** static void MX_I2C1_Init(void)
 263:Core/Src/main.c **** {
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 272:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 273:Core/Src/main.c ****   hi2c1.Init.Timing = 0x2000090E;
 274:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 275:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 276:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 277:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 278:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 279:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 280:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 281:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 282:Core/Src/main.c ****   {
 283:Core/Src/main.c ****     Error_Handler();
 284:Core/Src/main.c ****   }
 285:Core/Src/main.c ****   /** Configure Analogue filter
 286:Core/Src/main.c ****   */
 287:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 288:Core/Src/main.c ****   {
 289:Core/Src/main.c ****     Error_Handler();
 290:Core/Src/main.c ****   }
 291:Core/Src/main.c ****   /** Configure Digital filter
 292:Core/Src/main.c ****   */
 293:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 294:Core/Src/main.c ****   {
 295:Core/Src/main.c ****     Error_Handler();
 296:Core/Src/main.c ****   }
 297:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c **** }
 302:Core/Src/main.c **** 
 303:Core/Src/main.c **** /**
 304:Core/Src/main.c ****   * @brief SPI1 Initialization Function
 305:Core/Src/main.c ****   * @param None
 306:Core/Src/main.c ****   * @retval None
 307:Core/Src/main.c ****   */
 308:Core/Src/main.c **** static void MX_SPI1_Init(void)
 309:Core/Src/main.c **** {
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 0 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE END SPI1_Init 0 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 1 */
 316:Core/Src/main.c **** 
ARM GAS  /tmp/cc0SAFfQ.s 			page 7


 317:Core/Src/main.c ****   /* USER CODE END SPI1_Init 1 */
 318:Core/Src/main.c ****   /* SPI1 parameter configuration*/
 319:Core/Src/main.c ****   hspi1.Instance = SPI1;
 320:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 321:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 322:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 323:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 324:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 325:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 326:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 327:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 328:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 329:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 330:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 331:Core/Src/main.c ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 332:Core/Src/main.c ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 333:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 334:Core/Src/main.c ****   {
 335:Core/Src/main.c ****     Error_Handler();
 336:Core/Src/main.c ****   }
 337:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 2 */
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   /* USER CODE END SPI1_Init 2 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c **** }
 342:Core/Src/main.c **** 
 343:Core/Src/main.c **** /**
 344:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 345:Core/Src/main.c ****   * @param None
 346:Core/Src/main.c ****   * @retval None
 347:Core/Src/main.c ****   */
 348:Core/Src/main.c **** static void MX_TIM1_Init(void)
 349:Core/Src/main.c **** {
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 356:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 357:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 358:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 363:Core/Src/main.c ****   htim1.Instance = TIM1;
 364:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 365:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 366:Core/Src/main.c ****   htim1.Init.Period = 65535;
 367:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 368:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 369:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 370:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 371:Core/Src/main.c ****   {
 372:Core/Src/main.c ****     Error_Handler();
 373:Core/Src/main.c ****   }
ARM GAS  /tmp/cc0SAFfQ.s 			page 8


 374:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 375:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 376:Core/Src/main.c ****   {
 377:Core/Src/main.c ****     Error_Handler();
 378:Core/Src/main.c ****   }
 379:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 380:Core/Src/main.c ****   {
 381:Core/Src/main.c ****     Error_Handler();
 382:Core/Src/main.c ****   }
 383:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 384:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 385:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 386:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 387:Core/Src/main.c ****   {
 388:Core/Src/main.c ****     Error_Handler();
 389:Core/Src/main.c ****   }
 390:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 391:Core/Src/main.c ****   sConfigOC.Pulse = 0x5555;
 392:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 393:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 394:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 395:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 396:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 397:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 398:Core/Src/main.c ****   {
 399:Core/Src/main.c ****     Error_Handler();
 400:Core/Src/main.c ****   }
 401:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 402:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 403:Core/Src/main.c ****   {
 404:Core/Src/main.c ****     Error_Handler();
 405:Core/Src/main.c ****   }
 406:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 407:Core/Src/main.c ****   {
 408:Core/Src/main.c ****     Error_Handler();
 409:Core/Src/main.c ****   }
 410:Core/Src/main.c ****   sConfigOC.Pulse = 0x5555;
 411:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 412:Core/Src/main.c ****   {
 413:Core/Src/main.c ****     Error_Handler();
 414:Core/Src/main.c ****   }
 415:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 416:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 417:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 418:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 419:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 420:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 421:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 422:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 423:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 424:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 425:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 426:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 427:Core/Src/main.c ****   {
 428:Core/Src/main.c ****     Error_Handler();
 429:Core/Src/main.c ****   }
 430:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
ARM GAS  /tmp/cc0SAFfQ.s 			page 9


 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 433:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** }
 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** /**
 438:Core/Src/main.c ****   * @brief USART2 Initialization Function
 439:Core/Src/main.c ****   * @param None
 440:Core/Src/main.c ****   * @retval None
 441:Core/Src/main.c ****   */
 442:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 443:Core/Src/main.c **** {
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 452:Core/Src/main.c ****   huart2.Instance = USART2;
 453:Core/Src/main.c ****   huart2.Init.BaudRate = 1200;
 454:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 455:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 456:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 457:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_RX;
 458:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 459:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 460:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 461:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 462:Core/Src/main.c ****   huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 463:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 464:Core/Src/main.c ****   {
 465:Core/Src/main.c ****     Error_Handler();
 466:Core/Src/main.c ****   }
 467:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 470:Core/Src/main.c **** 
 471:Core/Src/main.c **** }
 472:Core/Src/main.c **** 
 473:Core/Src/main.c **** /**
 474:Core/Src/main.c ****   * Enable DMA controller clock
 475:Core/Src/main.c ****   */
 476:Core/Src/main.c **** static void MX_DMA_Init(void)
 477:Core/Src/main.c **** {
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /* DMA controller clock enable */
 480:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /* DMA interrupt init */
 483:Core/Src/main.c ****   /* DMA1_Channel6_IRQn interrupt configuration */
 484:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 485:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 486:Core/Src/main.c **** 
 487:Core/Src/main.c **** }
ARM GAS  /tmp/cc0SAFfQ.s 			page 10


 488:Core/Src/main.c **** 
 489:Core/Src/main.c **** /**
 490:Core/Src/main.c ****   * @brief GPIO Initialization Function
 491:Core/Src/main.c ****   * @param None
 492:Core/Src/main.c ****   * @retval None
 493:Core/Src/main.c ****   */
 494:Core/Src/main.c **** static void MX_GPIO_Init(void)
 495:Core/Src/main.c **** {
  28              		.loc 1 495 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 40
 496:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 496 3 view .LVU1
  40              		.loc 1 496 20 is_stmt 0 view .LVU2
  41 0004 0023     		movs	r3, #0
  42 0006 0393     		str	r3, [sp, #12]
  43 0008 0493     		str	r3, [sp, #16]
  44 000a 0593     		str	r3, [sp, #20]
  45 000c 0693     		str	r3, [sp, #24]
  46 000e 0793     		str	r3, [sp, #28]
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 499:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  47              		.loc 1 499 3 is_stmt 1 view .LVU3
  48              	.LBB4:
  49              		.loc 1 499 3 view .LVU4
  50              		.loc 1 499 3 view .LVU5
  51 0010 03F18043 		add	r3, r3, #1073741824
  52 0014 03F50433 		add	r3, r3, #135168
  53 0018 5A69     		ldr	r2, [r3, #20]
  54 001a 42F40032 		orr	r2, r2, #131072
  55 001e 5A61     		str	r2, [r3, #20]
  56              		.loc 1 499 3 view .LVU6
  57 0020 5A69     		ldr	r2, [r3, #20]
  58 0022 02F40032 		and	r2, r2, #131072
  59 0026 0192     		str	r2, [sp, #4]
  60              		.loc 1 499 3 view .LVU7
  61 0028 019A     		ldr	r2, [sp, #4]
  62              	.LBE4:
  63              		.loc 1 499 3 view .LVU8
 500:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  64              		.loc 1 500 3 view .LVU9
  65              	.LBB5:
  66              		.loc 1 500 3 view .LVU10
  67              		.loc 1 500 3 view .LVU11
  68 002a 5A69     		ldr	r2, [r3, #20]
  69 002c 42F48022 		orr	r2, r2, #262144
  70 0030 5A61     		str	r2, [r3, #20]
  71              		.loc 1 500 3 view .LVU12
ARM GAS  /tmp/cc0SAFfQ.s 			page 11


  72 0032 5B69     		ldr	r3, [r3, #20]
  73 0034 03F48023 		and	r3, r3, #262144
  74 0038 0293     		str	r3, [sp, #8]
  75              		.loc 1 500 3 view .LVU13
  76 003a 029B     		ldr	r3, [sp, #8]
  77              	.LBE5:
  78              		.loc 1 500 3 view .LVU14
 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****   /*Configure GPIO pin : PA1 */
 503:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1;
  79              		.loc 1 503 3 view .LVU15
  80              		.loc 1 503 23 is_stmt 0 view .LVU16
  81 003c 0223     		movs	r3, #2
  82 003e 0393     		str	r3, [sp, #12]
 504:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  83              		.loc 1 504 3 is_stmt 1 view .LVU17
  84              		.loc 1 504 24 is_stmt 0 view .LVU18
  85 0040 0323     		movs	r3, #3
  86 0042 0493     		str	r3, [sp, #16]
 505:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  87              		.loc 1 505 3 is_stmt 1 view .LVU19
 506:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  88              		.loc 1 506 3 view .LVU20
  89 0044 03A9     		add	r1, sp, #12
  90 0046 4FF09040 		mov	r0, #1207959552
  91 004a FFF7FEFF 		bl	HAL_GPIO_Init
  92              	.LVL0:
 507:Core/Src/main.c **** 
 508:Core/Src/main.c ****   /*Configure GPIO pins : PA2 PA3 PA4 */
 509:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  93              		.loc 1 509 3 view .LVU21
  94              		.loc 1 509 23 is_stmt 0 view .LVU22
  95 004e 1C23     		movs	r3, #28
  96 0050 0393     		str	r3, [sp, #12]
 510:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  97              		.loc 1 510 3 is_stmt 1 view .LVU23
  98              		.loc 1 510 24 is_stmt 0 view .LVU24
  99 0052 4FF48813 		mov	r3, #1114112
 100 0056 0493     		str	r3, [sp, #16]
 511:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 101              		.loc 1 511 3 is_stmt 1 view .LVU25
 102              		.loc 1 511 24 is_stmt 0 view .LVU26
 103 0058 0123     		movs	r3, #1
 104 005a 0593     		str	r3, [sp, #20]
 512:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 105              		.loc 1 512 3 is_stmt 1 view .LVU27
 106 005c 03A9     		add	r1, sp, #12
 107 005e 4FF09040 		mov	r0, #1207959552
 108 0062 FFF7FEFF 		bl	HAL_GPIO_Init
 109              	.LVL1:
 513:Core/Src/main.c **** 
 514:Core/Src/main.c **** }
 110              		.loc 1 514 1 is_stmt 0 view .LVU28
 111 0066 09B0     		add	sp, sp, #36
 112              	.LCFI2:
 113              		.cfi_def_cfa_offset 4
 114              		@ sp needed
ARM GAS  /tmp/cc0SAFfQ.s 			page 12


 115 0068 5DF804FB 		ldr	pc, [sp], #4
 116              		.cfi_endproc
 117              	.LFE130:
 119              		.section	.text.MX_DMA_Init,"ax",%progbits
 120              		.align	1
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 125              	MX_DMA_Init:
 126              	.LFB129:
 477:Core/Src/main.c **** 
 127              		.loc 1 477 1 is_stmt 1 view -0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 8
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 0000 00B5     		push	{lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 14, -4
 135 0002 83B0     		sub	sp, sp, #12
 136              	.LCFI4:
 137              		.cfi_def_cfa_offset 16
 480:Core/Src/main.c **** 
 138              		.loc 1 480 3 view .LVU30
 139              	.LBB6:
 480:Core/Src/main.c **** 
 140              		.loc 1 480 3 view .LVU31
 480:Core/Src/main.c **** 
 141              		.loc 1 480 3 view .LVU32
 142 0004 0A4B     		ldr	r3, .L5
 143 0006 5A69     		ldr	r2, [r3, #20]
 144 0008 42F00102 		orr	r2, r2, #1
 145 000c 5A61     		str	r2, [r3, #20]
 480:Core/Src/main.c **** 
 146              		.loc 1 480 3 view .LVU33
 147 000e 5B69     		ldr	r3, [r3, #20]
 148 0010 03F00103 		and	r3, r3, #1
 149 0014 0193     		str	r3, [sp, #4]
 480:Core/Src/main.c **** 
 150              		.loc 1 480 3 view .LVU34
 151 0016 019B     		ldr	r3, [sp, #4]
 152              	.LBE6:
 480:Core/Src/main.c **** 
 153              		.loc 1 480 3 view .LVU35
 484:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 154              		.loc 1 484 3 view .LVU36
 155 0018 0022     		movs	r2, #0
 156 001a 1146     		mov	r1, r2
 157 001c 1020     		movs	r0, #16
 158 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 159              	.LVL2:
 485:Core/Src/main.c **** 
 160              		.loc 1 485 3 view .LVU37
 161 0022 1020     		movs	r0, #16
 162 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 163              	.LVL3:
 487:Core/Src/main.c **** 
ARM GAS  /tmp/cc0SAFfQ.s 			page 13


 164              		.loc 1 487 1 is_stmt 0 view .LVU38
 165 0028 03B0     		add	sp, sp, #12
 166              	.LCFI5:
 167              		.cfi_def_cfa_offset 4
 168              		@ sp needed
 169 002a 5DF804FB 		ldr	pc, [sp], #4
 170              	.L6:
 171 002e 00BF     		.align	2
 172              	.L5:
 173 0030 00100240 		.word	1073876992
 174              		.cfi_endproc
 175              	.LFE129:
 177              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 178              		.align	1
 179              		.global	HAL_UART_RxCpltCallback
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 184              	HAL_UART_RxCpltCallback:
 185              	.LVL4:
 186              	.LFB131:
 515:Core/Src/main.c **** 
 516:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 517:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 518:Core/Src/main.c **** {
 187              		.loc 1 518 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		.loc 1 518 1 is_stmt 0 view .LVU40
 192 0000 08B5     		push	{r3, lr}
 193              	.LCFI6:
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 3, -8
 196              		.cfi_offset 14, -4
 519:Core/Src/main.c ****   //USART2->ISR &= ~USART_ISR_RXNE;
 520:Core/Src/main.c ****   //HAL_UART_Receive_DMA(&huart2, serial_input, 1);
 521:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, serial_input, 10);
 197              		.loc 1 521 3 is_stmt 1 view .LVU41
 198 0002 0A22     		movs	r2, #10
 199 0004 0249     		ldr	r1, .L9
 200 0006 0348     		ldr	r0, .L9+4
 201              	.LVL5:
 202              		.loc 1 521 3 is_stmt 0 view .LVU42
 203 0008 FFF7FEFF 		bl	HAL_UART_Receive_IT
 204              	.LVL6:
 522:Core/Src/main.c **** }
 205              		.loc 1 522 1 view .LVU43
 206 000c 08BD     		pop	{r3, pc}
 207              	.L10:
 208 000e 00BF     		.align	2
 209              	.L9:
 210 0010 00000000 		.word	.LANCHOR0
 211 0014 00000000 		.word	.LANCHOR1
 212              		.cfi_endproc
 213              	.LFE131:
 215              		.section	.text.Error_Handler,"ax",%progbits
ARM GAS  /tmp/cc0SAFfQ.s 			page 14


 216              		.align	1
 217              		.global	Error_Handler
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 222              	Error_Handler:
 223              	.LFB132:
 523:Core/Src/main.c **** /* USER CODE END 4 */
 524:Core/Src/main.c **** 
 525:Core/Src/main.c **** /**
 526:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 527:Core/Src/main.c ****   * @retval None
 528:Core/Src/main.c ****   */
 529:Core/Src/main.c **** void Error_Handler(void)
 530:Core/Src/main.c **** {
 224              		.loc 1 530 1 is_stmt 1 view -0
 225              		.cfi_startproc
 226              		@ Volatile: function does not return.
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 531:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 532:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 533:Core/Src/main.c ****   __disable_irq();
 230              		.loc 1 533 3 view .LVU45
 231              	.LBB7:
 232              	.LBI7:
 233              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
ARM GAS  /tmp/cc0SAFfQ.s 			page 15


  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
ARM GAS  /tmp/cc0SAFfQ.s 			page 16


  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 234              		.loc 2 140 27 view .LVU46
 235              	.LBB8:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc0SAFfQ.s 			page 17


 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 236              		.loc 2 142 3 view .LVU47
 237              		.syntax unified
 238              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 239 0000 72B6     		cpsid i
 240              	@ 0 "" 2
 241              		.thumb
 242              		.syntax unified
 243              	.L12:
 244              	.LBE8:
 245              	.LBE7:
 534:Core/Src/main.c ****   while (1)
 246              		.loc 1 534 3 discriminator 1 view .LVU48
 535:Core/Src/main.c ****   {
 536:Core/Src/main.c ****   }
 247              		.loc 1 536 3 discriminator 1 view .LVU49
 534:Core/Src/main.c ****   while (1)
 248              		.loc 1 534 9 discriminator 1 view .LVU50
 249 0002 FEE7     		b	.L12
 250              		.cfi_endproc
 251              	.LFE132:
 253              		.section	.text.MX_TIM1_Init,"ax",%progbits
 254              		.align	1
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 259              	MX_TIM1_Init:
 260              	.LFB127:
 349:Core/Src/main.c **** 
 261              		.loc 1 349 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 104
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 10B5     		push	{r4, lr}
 266              	.LCFI7:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 4, -8
 269              		.cfi_offset 14, -4
 270 0002 9AB0     		sub	sp, sp, #104
 271              	.LCFI8:
 272              		.cfi_def_cfa_offset 112
 355:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 273              		.loc 1 355 3 view .LVU52
 355:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 274              		.loc 1 355 26 is_stmt 0 view .LVU53
 275 0004 0024     		movs	r4, #0
 276 0006 1694     		str	r4, [sp, #88]
 277 0008 1794     		str	r4, [sp, #92]
 278 000a 1894     		str	r4, [sp, #96]
 279 000c 1994     		str	r4, [sp, #100]
 356:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 280              		.loc 1 356 3 is_stmt 1 view .LVU54
 356:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 281              		.loc 1 356 27 is_stmt 0 view .LVU55
 282 000e 1394     		str	r4, [sp, #76]
 283 0010 1494     		str	r4, [sp, #80]
 284 0012 1594     		str	r4, [sp, #84]
ARM GAS  /tmp/cc0SAFfQ.s 			page 18


 357:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 285              		.loc 1 357 3 is_stmt 1 view .LVU56
 357:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 286              		.loc 1 357 22 is_stmt 0 view .LVU57
 287 0014 0C94     		str	r4, [sp, #48]
 288 0016 0D94     		str	r4, [sp, #52]
 289 0018 0E94     		str	r4, [sp, #56]
 290 001a 0F94     		str	r4, [sp, #60]
 291 001c 1094     		str	r4, [sp, #64]
 292 001e 1194     		str	r4, [sp, #68]
 293 0020 1294     		str	r4, [sp, #72]
 358:Core/Src/main.c **** 
 294              		.loc 1 358 3 is_stmt 1 view .LVU58
 358:Core/Src/main.c **** 
 295              		.loc 1 358 34 is_stmt 0 view .LVU59
 296 0022 2C22     		movs	r2, #44
 297 0024 2146     		mov	r1, r4
 298 0026 01A8     		add	r0, sp, #4
 299 0028 FFF7FEFF 		bl	memset
 300              	.LVL7:
 363:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 301              		.loc 1 363 3 is_stmt 1 view .LVU60
 363:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 302              		.loc 1 363 18 is_stmt 0 view .LVU61
 303 002c 3E48     		ldr	r0, .L33
 304 002e 3F4B     		ldr	r3, .L33+4
 305 0030 0360     		str	r3, [r0]
 364:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 306              		.loc 1 364 3 is_stmt 1 view .LVU62
 364:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 307              		.loc 1 364 24 is_stmt 0 view .LVU63
 308 0032 0123     		movs	r3, #1
 309 0034 4360     		str	r3, [r0, #4]
 365:Core/Src/main.c ****   htim1.Init.Period = 65535;
 310              		.loc 1 365 3 is_stmt 1 view .LVU64
 365:Core/Src/main.c ****   htim1.Init.Period = 65535;
 311              		.loc 1 365 26 is_stmt 0 view .LVU65
 312 0036 8460     		str	r4, [r0, #8]
 366:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 313              		.loc 1 366 3 is_stmt 1 view .LVU66
 366:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 314              		.loc 1 366 21 is_stmt 0 view .LVU67
 315 0038 4FF6FF73 		movw	r3, #65535
 316 003c C360     		str	r3, [r0, #12]
 367:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 317              		.loc 1 367 3 is_stmt 1 view .LVU68
 367:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 318              		.loc 1 367 28 is_stmt 0 view .LVU69
 319 003e 0461     		str	r4, [r0, #16]
 368:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 320              		.loc 1 368 3 is_stmt 1 view .LVU70
 368:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 321              		.loc 1 368 32 is_stmt 0 view .LVU71
 322 0040 4461     		str	r4, [r0, #20]
 369:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 323              		.loc 1 369 3 is_stmt 1 view .LVU72
 369:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
ARM GAS  /tmp/cc0SAFfQ.s 			page 19


 324              		.loc 1 369 32 is_stmt 0 view .LVU73
 325 0042 8461     		str	r4, [r0, #24]
 370:Core/Src/main.c ****   {
 326              		.loc 1 370 3 is_stmt 1 view .LVU74
 370:Core/Src/main.c ****   {
 327              		.loc 1 370 7 is_stmt 0 view .LVU75
 328 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 329              	.LVL8:
 370:Core/Src/main.c ****   {
 330              		.loc 1 370 6 view .LVU76
 331 0048 0028     		cmp	r0, #0
 332 004a 5BD1     		bne	.L24
 374:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 333              		.loc 1 374 3 is_stmt 1 view .LVU77
 374:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 334              		.loc 1 374 34 is_stmt 0 view .LVU78
 335 004c 4FF48053 		mov	r3, #4096
 336 0050 1693     		str	r3, [sp, #88]
 375:Core/Src/main.c ****   {
 337              		.loc 1 375 3 is_stmt 1 view .LVU79
 375:Core/Src/main.c ****   {
 338              		.loc 1 375 7 is_stmt 0 view .LVU80
 339 0052 16A9     		add	r1, sp, #88
 340 0054 3448     		ldr	r0, .L33
 341 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 342              	.LVL9:
 375:Core/Src/main.c ****   {
 343              		.loc 1 375 6 view .LVU81
 344 005a 0028     		cmp	r0, #0
 345 005c 54D1     		bne	.L25
 379:Core/Src/main.c ****   {
 346              		.loc 1 379 3 is_stmt 1 view .LVU82
 379:Core/Src/main.c ****   {
 347              		.loc 1 379 7 is_stmt 0 view .LVU83
 348 005e 3248     		ldr	r0, .L33
 349 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 350              	.LVL10:
 379:Core/Src/main.c ****   {
 351              		.loc 1 379 6 view .LVU84
 352 0064 0028     		cmp	r0, #0
 353 0066 51D1     		bne	.L26
 383:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 354              		.loc 1 383 3 is_stmt 1 view .LVU85
 383:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 355              		.loc 1 383 37 is_stmt 0 view .LVU86
 356 0068 0023     		movs	r3, #0
 357 006a 1393     		str	r3, [sp, #76]
 384:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 358              		.loc 1 384 3 is_stmt 1 view .LVU87
 384:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 359              		.loc 1 384 38 is_stmt 0 view .LVU88
 360 006c 1493     		str	r3, [sp, #80]
 385:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 361              		.loc 1 385 3 is_stmt 1 view .LVU89
 385:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 362              		.loc 1 385 33 is_stmt 0 view .LVU90
 363 006e 1593     		str	r3, [sp, #84]
ARM GAS  /tmp/cc0SAFfQ.s 			page 20


 386:Core/Src/main.c ****   {
 364              		.loc 1 386 3 is_stmt 1 view .LVU91
 386:Core/Src/main.c ****   {
 365              		.loc 1 386 7 is_stmt 0 view .LVU92
 366 0070 13A9     		add	r1, sp, #76
 367 0072 2D48     		ldr	r0, .L33
 368 0074 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 369              	.LVL11:
 386:Core/Src/main.c ****   {
 370              		.loc 1 386 6 view .LVU93
 371 0078 0028     		cmp	r0, #0
 372 007a 49D1     		bne	.L27
 390:Core/Src/main.c ****   sConfigOC.Pulse = 0x5555;
 373              		.loc 1 390 3 is_stmt 1 view .LVU94
 390:Core/Src/main.c ****   sConfigOC.Pulse = 0x5555;
 374              		.loc 1 390 20 is_stmt 0 view .LVU95
 375 007c 6023     		movs	r3, #96
 376 007e 0C93     		str	r3, [sp, #48]
 391:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 377              		.loc 1 391 3 is_stmt 1 view .LVU96
 391:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 378              		.loc 1 391 19 is_stmt 0 view .LVU97
 379 0080 45F25553 		movw	r3, #21845
 380 0084 0D93     		str	r3, [sp, #52]
 392:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 381              		.loc 1 392 3 is_stmt 1 view .LVU98
 392:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 382              		.loc 1 392 24 is_stmt 0 view .LVU99
 383 0086 0022     		movs	r2, #0
 384 0088 0E92     		str	r2, [sp, #56]
 393:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 385              		.loc 1 393 3 is_stmt 1 view .LVU100
 393:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 386              		.loc 1 393 25 is_stmt 0 view .LVU101
 387 008a 0F92     		str	r2, [sp, #60]
 394:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 388              		.loc 1 394 3 is_stmt 1 view .LVU102
 394:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 389              		.loc 1 394 24 is_stmt 0 view .LVU103
 390 008c 1092     		str	r2, [sp, #64]
 395:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 391              		.loc 1 395 3 is_stmt 1 view .LVU104
 395:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 392              		.loc 1 395 25 is_stmt 0 view .LVU105
 393 008e 1192     		str	r2, [sp, #68]
 396:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 394              		.loc 1 396 3 is_stmt 1 view .LVU106
 396:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 395              		.loc 1 396 26 is_stmt 0 view .LVU107
 396 0090 1292     		str	r2, [sp, #72]
 397:Core/Src/main.c ****   {
 397              		.loc 1 397 3 is_stmt 1 view .LVU108
 397:Core/Src/main.c ****   {
 398              		.loc 1 397 7 is_stmt 0 view .LVU109
 399 0092 0CA9     		add	r1, sp, #48
 400 0094 2448     		ldr	r0, .L33
 401 0096 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
ARM GAS  /tmp/cc0SAFfQ.s 			page 21


 402              	.LVL12:
 397:Core/Src/main.c ****   {
 403              		.loc 1 397 6 view .LVU110
 404 009a 0028     		cmp	r0, #0
 405 009c 3AD1     		bne	.L28
 401:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 406              		.loc 1 401 3 is_stmt 1 view .LVU111
 401:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 407              		.loc 1 401 19 is_stmt 0 view .LVU112
 408 009e 0023     		movs	r3, #0
 409 00a0 0D93     		str	r3, [sp, #52]
 402:Core/Src/main.c ****   {
 410              		.loc 1 402 3 is_stmt 1 view .LVU113
 402:Core/Src/main.c ****   {
 411              		.loc 1 402 7 is_stmt 0 view .LVU114
 412 00a2 0422     		movs	r2, #4
 413 00a4 0CA9     		add	r1, sp, #48
 414 00a6 2048     		ldr	r0, .L33
 415 00a8 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 416              	.LVL13:
 402:Core/Src/main.c ****   {
 417              		.loc 1 402 6 view .LVU115
 418 00ac 0028     		cmp	r0, #0
 419 00ae 33D1     		bne	.L29
 406:Core/Src/main.c ****   {
 420              		.loc 1 406 3 is_stmt 1 view .LVU116
 406:Core/Src/main.c ****   {
 421              		.loc 1 406 7 is_stmt 0 view .LVU117
 422 00b0 0822     		movs	r2, #8
 423 00b2 0CA9     		add	r1, sp, #48
 424 00b4 1C48     		ldr	r0, .L33
 425 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 426              	.LVL14:
 406:Core/Src/main.c ****   {
 427              		.loc 1 406 6 view .LVU118
 428 00ba 0028     		cmp	r0, #0
 429 00bc 2ED1     		bne	.L30
 410:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 430              		.loc 1 410 3 is_stmt 1 view .LVU119
 410:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 431              		.loc 1 410 19 is_stmt 0 view .LVU120
 432 00be 45F25553 		movw	r3, #21845
 433 00c2 0D93     		str	r3, [sp, #52]
 411:Core/Src/main.c ****   {
 434              		.loc 1 411 3 is_stmt 1 view .LVU121
 411:Core/Src/main.c ****   {
 435              		.loc 1 411 7 is_stmt 0 view .LVU122
 436 00c4 0C22     		movs	r2, #12
 437 00c6 0CA9     		add	r1, sp, #48
 438 00c8 1748     		ldr	r0, .L33
 439 00ca FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 440              	.LVL15:
 411:Core/Src/main.c ****   {
 441              		.loc 1 411 6 view .LVU123
 442 00ce 38BB     		cbnz	r0, .L31
 415:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 443              		.loc 1 415 3 is_stmt 1 view .LVU124
ARM GAS  /tmp/cc0SAFfQ.s 			page 22


 415:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 444              		.loc 1 415 40 is_stmt 0 view .LVU125
 445 00d0 0023     		movs	r3, #0
 446 00d2 0193     		str	r3, [sp, #4]
 416:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 447              		.loc 1 416 3 is_stmt 1 view .LVU126
 416:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 448              		.loc 1 416 41 is_stmt 0 view .LVU127
 449 00d4 0293     		str	r3, [sp, #8]
 417:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 450              		.loc 1 417 3 is_stmt 1 view .LVU128
 417:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 451              		.loc 1 417 34 is_stmt 0 view .LVU129
 452 00d6 0393     		str	r3, [sp, #12]
 418:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 453              		.loc 1 418 3 is_stmt 1 view .LVU130
 418:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 454              		.loc 1 418 33 is_stmt 0 view .LVU131
 455 00d8 0493     		str	r3, [sp, #16]
 419:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 456              		.loc 1 419 3 is_stmt 1 view .LVU132
 419:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 457              		.loc 1 419 35 is_stmt 0 view .LVU133
 458 00da 0593     		str	r3, [sp, #20]
 420:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 459              		.loc 1 420 3 is_stmt 1 view .LVU134
 420:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 460              		.loc 1 420 38 is_stmt 0 view .LVU135
 461 00dc 4FF40052 		mov	r2, #8192
 462 00e0 0692     		str	r2, [sp, #24]
 421:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 463              		.loc 1 421 3 is_stmt 1 view .LVU136
 421:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 464              		.loc 1 421 36 is_stmt 0 view .LVU137
 465 00e2 0793     		str	r3, [sp, #28]
 422:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 466              		.loc 1 422 3 is_stmt 1 view .LVU138
 422:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 467              		.loc 1 422 36 is_stmt 0 view .LVU139
 468 00e4 0893     		str	r3, [sp, #32]
 423:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 469              		.loc 1 423 3 is_stmt 1 view .LVU140
 423:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 470              		.loc 1 423 39 is_stmt 0 view .LVU141
 471 00e6 4FF00072 		mov	r2, #33554432
 472 00ea 0992     		str	r2, [sp, #36]
 424:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 473              		.loc 1 424 3 is_stmt 1 view .LVU142
 424:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 474              		.loc 1 424 37 is_stmt 0 view .LVU143
 475 00ec 0A93     		str	r3, [sp, #40]
 425:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 476              		.loc 1 425 3 is_stmt 1 view .LVU144
 425:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 477              		.loc 1 425 40 is_stmt 0 view .LVU145
 478 00ee 0B93     		str	r3, [sp, #44]
 426:Core/Src/main.c ****   {
ARM GAS  /tmp/cc0SAFfQ.s 			page 23


 479              		.loc 1 426 3 is_stmt 1 view .LVU146
 426:Core/Src/main.c ****   {
 480              		.loc 1 426 7 is_stmt 0 view .LVU147
 481 00f0 01A9     		add	r1, sp, #4
 482 00f2 0D48     		ldr	r0, .L33
 483 00f4 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 484              	.LVL16:
 426:Core/Src/main.c ****   {
 485              		.loc 1 426 6 view .LVU148
 486 00f8 A0B9     		cbnz	r0, .L32
 433:Core/Src/main.c **** 
 487              		.loc 1 433 3 is_stmt 1 view .LVU149
 488 00fa 0B48     		ldr	r0, .L33
 489 00fc FFF7FEFF 		bl	HAL_TIM_MspPostInit
 490              	.LVL17:
 435:Core/Src/main.c **** 
 491              		.loc 1 435 1 is_stmt 0 view .LVU150
 492 0100 1AB0     		add	sp, sp, #104
 493              	.LCFI9:
 494              		.cfi_remember_state
 495              		.cfi_def_cfa_offset 8
 496              		@ sp needed
 497 0102 10BD     		pop	{r4, pc}
 498              	.L24:
 499              	.LCFI10:
 500              		.cfi_restore_state
 372:Core/Src/main.c ****   }
 501              		.loc 1 372 5 is_stmt 1 view .LVU151
 502 0104 FFF7FEFF 		bl	Error_Handler
 503              	.LVL18:
 504              	.L25:
 377:Core/Src/main.c ****   }
 505              		.loc 1 377 5 view .LVU152
 506 0108 FFF7FEFF 		bl	Error_Handler
 507              	.LVL19:
 508              	.L26:
 381:Core/Src/main.c ****   }
 509              		.loc 1 381 5 view .LVU153
 510 010c FFF7FEFF 		bl	Error_Handler
 511              	.LVL20:
 512              	.L27:
 388:Core/Src/main.c ****   }
 513              		.loc 1 388 5 view .LVU154
 514 0110 FFF7FEFF 		bl	Error_Handler
 515              	.LVL21:
 516              	.L28:
 399:Core/Src/main.c ****   }
 517              		.loc 1 399 5 view .LVU155
 518 0114 FFF7FEFF 		bl	Error_Handler
 519              	.LVL22:
 520              	.L29:
 404:Core/Src/main.c ****   }
 521              		.loc 1 404 5 view .LVU156
 522 0118 FFF7FEFF 		bl	Error_Handler
 523              	.LVL23:
 524              	.L30:
 408:Core/Src/main.c ****   }
ARM GAS  /tmp/cc0SAFfQ.s 			page 24


 525              		.loc 1 408 5 view .LVU157
 526 011c FFF7FEFF 		bl	Error_Handler
 527              	.LVL24:
 528              	.L31:
 413:Core/Src/main.c ****   }
 529              		.loc 1 413 5 view .LVU158
 530 0120 FFF7FEFF 		bl	Error_Handler
 531              	.LVL25:
 532              	.L32:
 428:Core/Src/main.c ****   }
 533              		.loc 1 428 5 view .LVU159
 534 0124 FFF7FEFF 		bl	Error_Handler
 535              	.LVL26:
 536              	.L34:
 537              		.align	2
 538              	.L33:
 539 0128 00000000 		.word	.LANCHOR2
 540 012c 002C0140 		.word	1073818624
 541              		.cfi_endproc
 542              	.LFE127:
 544              		.section	.text.MX_I2C1_Init,"ax",%progbits
 545              		.align	1
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 550              	MX_I2C1_Init:
 551              	.LFB125:
 263:Core/Src/main.c **** 
 552              		.loc 1 263 1 view -0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556 0000 08B5     		push	{r3, lr}
 557              	.LCFI11:
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 3, -8
 560              		.cfi_offset 14, -4
 272:Core/Src/main.c ****   hi2c1.Init.Timing = 0x2000090E;
 561              		.loc 1 272 3 view .LVU161
 272:Core/Src/main.c ****   hi2c1.Init.Timing = 0x2000090E;
 562              		.loc 1 272 18 is_stmt 0 view .LVU162
 563 0002 1148     		ldr	r0, .L43
 564 0004 114B     		ldr	r3, .L43+4
 565 0006 0360     		str	r3, [r0]
 273:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 566              		.loc 1 273 3 is_stmt 1 view .LVU163
 273:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 567              		.loc 1 273 21 is_stmt 0 view .LVU164
 568 0008 114B     		ldr	r3, .L43+8
 569 000a 4360     		str	r3, [r0, #4]
 274:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 570              		.loc 1 274 3 is_stmt 1 view .LVU165
 274:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 571              		.loc 1 274 26 is_stmt 0 view .LVU166
 572 000c 0023     		movs	r3, #0
 573 000e 8360     		str	r3, [r0, #8]
 275:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
ARM GAS  /tmp/cc0SAFfQ.s 			page 25


 574              		.loc 1 275 3 is_stmt 1 view .LVU167
 275:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 575              		.loc 1 275 29 is_stmt 0 view .LVU168
 576 0010 0122     		movs	r2, #1
 577 0012 C260     		str	r2, [r0, #12]
 276:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 578              		.loc 1 276 3 is_stmt 1 view .LVU169
 276:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 579              		.loc 1 276 30 is_stmt 0 view .LVU170
 580 0014 0361     		str	r3, [r0, #16]
 277:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 581              		.loc 1 277 3 is_stmt 1 view .LVU171
 277:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 582              		.loc 1 277 26 is_stmt 0 view .LVU172
 583 0016 4361     		str	r3, [r0, #20]
 278:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 584              		.loc 1 278 3 is_stmt 1 view .LVU173
 278:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 585              		.loc 1 278 31 is_stmt 0 view .LVU174
 586 0018 8361     		str	r3, [r0, #24]
 279:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 587              		.loc 1 279 3 is_stmt 1 view .LVU175
 279:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 588              		.loc 1 279 30 is_stmt 0 view .LVU176
 589 001a C361     		str	r3, [r0, #28]
 280:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 590              		.loc 1 280 3 is_stmt 1 view .LVU177
 280:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 591              		.loc 1 280 28 is_stmt 0 view .LVU178
 592 001c 0362     		str	r3, [r0, #32]
 281:Core/Src/main.c ****   {
 593              		.loc 1 281 3 is_stmt 1 view .LVU179
 281:Core/Src/main.c ****   {
 594              		.loc 1 281 7 is_stmt 0 view .LVU180
 595 001e FFF7FEFF 		bl	HAL_I2C_Init
 596              	.LVL27:
 281:Core/Src/main.c ****   {
 597              		.loc 1 281 6 view .LVU181
 598 0022 50B9     		cbnz	r0, .L40
 287:Core/Src/main.c ****   {
 599              		.loc 1 287 3 is_stmt 1 view .LVU182
 287:Core/Src/main.c ****   {
 600              		.loc 1 287 7 is_stmt 0 view .LVU183
 601 0024 0021     		movs	r1, #0
 602 0026 0848     		ldr	r0, .L43
 603 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 604              	.LVL28:
 287:Core/Src/main.c ****   {
 605              		.loc 1 287 6 view .LVU184
 606 002c 38B9     		cbnz	r0, .L41
 293:Core/Src/main.c ****   {
 607              		.loc 1 293 3 is_stmt 1 view .LVU185
 293:Core/Src/main.c ****   {
 608              		.loc 1 293 7 is_stmt 0 view .LVU186
 609 002e 0021     		movs	r1, #0
 610 0030 0548     		ldr	r0, .L43
 611 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
ARM GAS  /tmp/cc0SAFfQ.s 			page 26


 612              	.LVL29:
 293:Core/Src/main.c ****   {
 613              		.loc 1 293 6 view .LVU187
 614 0036 20B9     		cbnz	r0, .L42
 301:Core/Src/main.c **** 
 615              		.loc 1 301 1 view .LVU188
 616 0038 08BD     		pop	{r3, pc}
 617              	.L40:
 283:Core/Src/main.c ****   }
 618              		.loc 1 283 5 is_stmt 1 view .LVU189
 619 003a FFF7FEFF 		bl	Error_Handler
 620              	.LVL30:
 621              	.L41:
 289:Core/Src/main.c ****   }
 622              		.loc 1 289 5 view .LVU190
 623 003e FFF7FEFF 		bl	Error_Handler
 624              	.LVL31:
 625              	.L42:
 295:Core/Src/main.c ****   }
 626              		.loc 1 295 5 view .LVU191
 627 0042 FFF7FEFF 		bl	Error_Handler
 628              	.LVL32:
 629              	.L44:
 630 0046 00BF     		.align	2
 631              	.L43:
 632 0048 00000000 		.word	.LANCHOR3
 633 004c 00540040 		.word	1073763328
 634 0050 0E090020 		.word	536873230
 635              		.cfi_endproc
 636              	.LFE125:
 638              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 639              		.align	1
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 644              	MX_USART2_UART_Init:
 645              	.LFB128:
 443:Core/Src/main.c **** 
 646              		.loc 1 443 1 view -0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650 0000 08B5     		push	{r3, lr}
 651              	.LCFI12:
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 3, -8
 654              		.cfi_offset 14, -4
 452:Core/Src/main.c ****   huart2.Init.BaudRate = 1200;
 655              		.loc 1 452 3 view .LVU193
 452:Core/Src/main.c ****   huart2.Init.BaudRate = 1200;
 656              		.loc 1 452 19 is_stmt 0 view .LVU194
 657 0002 0D48     		ldr	r0, .L49
 658 0004 0D4B     		ldr	r3, .L49+4
 659 0006 0360     		str	r3, [r0]
 453:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 660              		.loc 1 453 3 is_stmt 1 view .LVU195
 453:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
ARM GAS  /tmp/cc0SAFfQ.s 			page 27


 661              		.loc 1 453 24 is_stmt 0 view .LVU196
 662 0008 4FF49663 		mov	r3, #1200
 663 000c 4360     		str	r3, [r0, #4]
 454:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 664              		.loc 1 454 3 is_stmt 1 view .LVU197
 454:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 665              		.loc 1 454 26 is_stmt 0 view .LVU198
 666 000e 0023     		movs	r3, #0
 667 0010 8360     		str	r3, [r0, #8]
 455:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 668              		.loc 1 455 3 is_stmt 1 view .LVU199
 455:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 669              		.loc 1 455 24 is_stmt 0 view .LVU200
 670 0012 C360     		str	r3, [r0, #12]
 456:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_RX;
 671              		.loc 1 456 3 is_stmt 1 view .LVU201
 456:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_RX;
 672              		.loc 1 456 22 is_stmt 0 view .LVU202
 673 0014 0361     		str	r3, [r0, #16]
 457:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 674              		.loc 1 457 3 is_stmt 1 view .LVU203
 457:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 675              		.loc 1 457 20 is_stmt 0 view .LVU204
 676 0016 0422     		movs	r2, #4
 677 0018 4261     		str	r2, [r0, #20]
 458:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 678              		.loc 1 458 3 is_stmt 1 view .LVU205
 458:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 679              		.loc 1 458 25 is_stmt 0 view .LVU206
 680 001a 8361     		str	r3, [r0, #24]
 459:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 681              		.loc 1 459 3 is_stmt 1 view .LVU207
 459:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 682              		.loc 1 459 28 is_stmt 0 view .LVU208
 683 001c C361     		str	r3, [r0, #28]
 460:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 684              		.loc 1 460 3 is_stmt 1 view .LVU209
 460:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 685              		.loc 1 460 30 is_stmt 0 view .LVU210
 686 001e 0362     		str	r3, [r0, #32]
 461:Core/Src/main.c ****   huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 687              		.loc 1 461 3 is_stmt 1 view .LVU211
 461:Core/Src/main.c ****   huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 688              		.loc 1 461 38 is_stmt 0 view .LVU212
 689 0020 1023     		movs	r3, #16
 690 0022 4362     		str	r3, [r0, #36]
 462:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 691              		.loc 1 462 3 is_stmt 1 view .LVU213
 462:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 692              		.loc 1 462 38 is_stmt 0 view .LVU214
 693 0024 4FF48053 		mov	r3, #4096
 694 0028 8363     		str	r3, [r0, #56]
 463:Core/Src/main.c ****   {
 695              		.loc 1 463 3 is_stmt 1 view .LVU215
 463:Core/Src/main.c ****   {
 696              		.loc 1 463 7 is_stmt 0 view .LVU216
 697 002a FFF7FEFF 		bl	HAL_UART_Init
ARM GAS  /tmp/cc0SAFfQ.s 			page 28


 698              	.LVL33:
 463:Core/Src/main.c ****   {
 699              		.loc 1 463 6 view .LVU217
 700 002e 00B9     		cbnz	r0, .L48
 471:Core/Src/main.c **** 
 701              		.loc 1 471 1 view .LVU218
 702 0030 08BD     		pop	{r3, pc}
 703              	.L48:
 465:Core/Src/main.c ****   }
 704              		.loc 1 465 5 is_stmt 1 view .LVU219
 705 0032 FFF7FEFF 		bl	Error_Handler
 706              	.LVL34:
 707              	.L50:
 708 0036 00BF     		.align	2
 709              	.L49:
 710 0038 00000000 		.word	.LANCHOR1
 711 003c 00440040 		.word	1073759232
 712              		.cfi_endproc
 713              	.LFE128:
 715              		.section	.text.MX_SPI1_Init,"ax",%progbits
 716              		.align	1
 717              		.syntax unified
 718              		.thumb
 719              		.thumb_func
 721              	MX_SPI1_Init:
 722              	.LFB126:
 309:Core/Src/main.c **** 
 723              		.loc 1 309 1 view -0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727 0000 08B5     		push	{r3, lr}
 728              	.LCFI13:
 729              		.cfi_def_cfa_offset 8
 730              		.cfi_offset 3, -8
 731              		.cfi_offset 14, -4
 319:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 732              		.loc 1 319 3 view .LVU221
 319:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 733              		.loc 1 319 18 is_stmt 0 view .LVU222
 734 0002 1048     		ldr	r0, .L55
 735 0004 104B     		ldr	r3, .L55+4
 736 0006 0360     		str	r3, [r0]
 320:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 737              		.loc 1 320 3 is_stmt 1 view .LVU223
 320:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 738              		.loc 1 320 19 is_stmt 0 view .LVU224
 739 0008 4FF48273 		mov	r3, #260
 740 000c 4360     		str	r3, [r0, #4]
 321:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 741              		.loc 1 321 3 is_stmt 1 view .LVU225
 321:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 742              		.loc 1 321 24 is_stmt 0 view .LVU226
 743 000e 4FF48063 		mov	r3, #1024
 744 0012 8360     		str	r3, [r0, #8]
 322:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 745              		.loc 1 322 3 is_stmt 1 view .LVU227
ARM GAS  /tmp/cc0SAFfQ.s 			page 29


 322:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 746              		.loc 1 322 23 is_stmt 0 view .LVU228
 747 0014 4FF44073 		mov	r3, #768
 748 0018 C360     		str	r3, [r0, #12]
 323:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 749              		.loc 1 323 3 is_stmt 1 view .LVU229
 323:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 750              		.loc 1 323 26 is_stmt 0 view .LVU230
 751 001a 0023     		movs	r3, #0
 752 001c 0361     		str	r3, [r0, #16]
 324:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 753              		.loc 1 324 3 is_stmt 1 view .LVU231
 324:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 754              		.loc 1 324 23 is_stmt 0 view .LVU232
 755 001e 4361     		str	r3, [r0, #20]
 325:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 756              		.loc 1 325 3 is_stmt 1 view .LVU233
 325:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 757              		.loc 1 325 18 is_stmt 0 view .LVU234
 758 0020 4FF40072 		mov	r2, #512
 759 0024 8261     		str	r2, [r0, #24]
 326:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 760              		.loc 1 326 3 is_stmt 1 view .LVU235
 326:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 761              		.loc 1 326 32 is_stmt 0 view .LVU236
 762 0026 C361     		str	r3, [r0, #28]
 327:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 763              		.loc 1 327 3 is_stmt 1 view .LVU237
 327:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 764              		.loc 1 327 23 is_stmt 0 view .LVU238
 765 0028 0362     		str	r3, [r0, #32]
 328:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 766              		.loc 1 328 3 is_stmt 1 view .LVU239
 328:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 767              		.loc 1 328 21 is_stmt 0 view .LVU240
 768 002a 4362     		str	r3, [r0, #36]
 329:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 769              		.loc 1 329 3 is_stmt 1 view .LVU241
 329:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 770              		.loc 1 329 29 is_stmt 0 view .LVU242
 771 002c 8362     		str	r3, [r0, #40]
 330:Core/Src/main.c ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 772              		.loc 1 330 3 is_stmt 1 view .LVU243
 330:Core/Src/main.c ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 773              		.loc 1 330 28 is_stmt 0 view .LVU244
 774 002e 0722     		movs	r2, #7
 775 0030 C262     		str	r2, [r0, #44]
 331:Core/Src/main.c ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 776              		.loc 1 331 3 is_stmt 1 view .LVU245
 331:Core/Src/main.c ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 777              		.loc 1 331 24 is_stmt 0 view .LVU246
 778 0032 0363     		str	r3, [r0, #48]
 332:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 779              		.loc 1 332 3 is_stmt 1 view .LVU247
 332:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 780              		.loc 1 332 23 is_stmt 0 view .LVU248
 781 0034 0823     		movs	r3, #8
ARM GAS  /tmp/cc0SAFfQ.s 			page 30


 782 0036 4363     		str	r3, [r0, #52]
 333:Core/Src/main.c ****   {
 783              		.loc 1 333 3 is_stmt 1 view .LVU249
 333:Core/Src/main.c ****   {
 784              		.loc 1 333 7 is_stmt 0 view .LVU250
 785 0038 FFF7FEFF 		bl	HAL_SPI_Init
 786              	.LVL35:
 333:Core/Src/main.c ****   {
 787              		.loc 1 333 6 view .LVU251
 788 003c 00B9     		cbnz	r0, .L54
 341:Core/Src/main.c **** 
 789              		.loc 1 341 1 view .LVU252
 790 003e 08BD     		pop	{r3, pc}
 791              	.L54:
 335:Core/Src/main.c ****   }
 792              		.loc 1 335 5 is_stmt 1 view .LVU253
 793 0040 FFF7FEFF 		bl	Error_Handler
 794              	.LVL36:
 795              	.L56:
 796              		.align	2
 797              	.L55:
 798 0044 00000000 		.word	.LANCHOR4
 799 0048 00300140 		.word	1073819648
 800              		.cfi_endproc
 801              	.LFE126:
 803              		.section	.text.SystemClock_Config,"ax",%progbits
 804              		.align	1
 805              		.global	SystemClock_Config
 806              		.syntax unified
 807              		.thumb
 808              		.thumb_func
 810              	SystemClock_Config:
 811              	.LFB124:
 217:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 812              		.loc 1 217 1 view -0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 88
 815              		@ frame_needed = 0, uses_anonymous_args = 0
 816 0000 00B5     		push	{lr}
 817              	.LCFI14:
 818              		.cfi_def_cfa_offset 4
 819              		.cfi_offset 14, -4
 820 0002 97B0     		sub	sp, sp, #92
 821              	.LCFI15:
 822              		.cfi_def_cfa_offset 96
 218:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 823              		.loc 1 218 3 view .LVU255
 218:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 824              		.loc 1 218 22 is_stmt 0 view .LVU256
 825 0004 2822     		movs	r2, #40
 826 0006 0021     		movs	r1, #0
 827 0008 0CA8     		add	r0, sp, #48
 828 000a FFF7FEFF 		bl	memset
 829              	.LVL37:
 219:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 830              		.loc 1 219 3 is_stmt 1 view .LVU257
 219:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
ARM GAS  /tmp/cc0SAFfQ.s 			page 31


 831              		.loc 1 219 22 is_stmt 0 view .LVU258
 832 000e 0023     		movs	r3, #0
 833 0010 0793     		str	r3, [sp, #28]
 834 0012 0893     		str	r3, [sp, #32]
 835 0014 0993     		str	r3, [sp, #36]
 836 0016 0A93     		str	r3, [sp, #40]
 837 0018 0B93     		str	r3, [sp, #44]
 220:Core/Src/main.c **** 
 838              		.loc 1 220 3 is_stmt 1 view .LVU259
 220:Core/Src/main.c **** 
 839              		.loc 1 220 28 is_stmt 0 view .LVU260
 840 001a 0193     		str	r3, [sp, #4]
 841 001c 0293     		str	r3, [sp, #8]
 842 001e 0393     		str	r3, [sp, #12]
 843 0020 0493     		str	r3, [sp, #16]
 844 0022 0593     		str	r3, [sp, #20]
 845 0024 0693     		str	r3, [sp, #24]
 225:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 846              		.loc 1 225 3 is_stmt 1 view .LVU261
 225:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 847              		.loc 1 225 36 is_stmt 0 view .LVU262
 848 0026 0223     		movs	r3, #2
 849 0028 0C93     		str	r3, [sp, #48]
 226:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 850              		.loc 1 226 3 is_stmt 1 view .LVU263
 226:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 851              		.loc 1 226 30 is_stmt 0 view .LVU264
 852 002a 0122     		movs	r2, #1
 853 002c 1092     		str	r2, [sp, #64]
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 854              		.loc 1 227 3 is_stmt 1 view .LVU265
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 855              		.loc 1 227 41 is_stmt 0 view .LVU266
 856 002e 1022     		movs	r2, #16
 857 0030 1192     		str	r2, [sp, #68]
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 858              		.loc 1 228 3 is_stmt 1 view .LVU267
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 859              		.loc 1 228 34 is_stmt 0 view .LVU268
 860 0032 1393     		str	r3, [sp, #76]
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL11;
 861              		.loc 1 229 3 is_stmt 1 view .LVU269
 230:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 862              		.loc 1 230 3 view .LVU270
 230:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 863              		.loc 1 230 32 is_stmt 0 view .LVU271
 864 0034 4FF41013 		mov	r3, #2359296
 865 0038 1593     		str	r3, [sp, #84]
 231:Core/Src/main.c ****   {
 866              		.loc 1 231 3 is_stmt 1 view .LVU272
 231:Core/Src/main.c ****   {
 867              		.loc 1 231 7 is_stmt 0 view .LVU273
 868 003a 0CA8     		add	r0, sp, #48
 869 003c FFF7FEFF 		bl	HAL_RCC_OscConfig
 870              	.LVL38:
 231:Core/Src/main.c ****   {
 871              		.loc 1 231 6 view .LVU274
ARM GAS  /tmp/cc0SAFfQ.s 			page 32


 872 0040 D8B9     		cbnz	r0, .L62
 237:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 873              		.loc 1 237 3 is_stmt 1 view .LVU275
 237:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 874              		.loc 1 237 31 is_stmt 0 view .LVU276
 875 0042 0F23     		movs	r3, #15
 876 0044 0793     		str	r3, [sp, #28]
 239:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 877              		.loc 1 239 3 is_stmt 1 view .LVU277
 239:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 878              		.loc 1 239 34 is_stmt 0 view .LVU278
 879 0046 0223     		movs	r3, #2
 880 0048 0893     		str	r3, [sp, #32]
 240:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 881              		.loc 1 240 3 is_stmt 1 view .LVU279
 240:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 882              		.loc 1 240 35 is_stmt 0 view .LVU280
 883 004a 0023     		movs	r3, #0
 884 004c 0993     		str	r3, [sp, #36]
 241:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 885              		.loc 1 241 3 is_stmt 1 view .LVU281
 241:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 886              		.loc 1 241 36 is_stmt 0 view .LVU282
 887 004e 4FF48063 		mov	r3, #1024
 888 0052 0A93     		str	r3, [sp, #40]
 242:Core/Src/main.c **** 
 889              		.loc 1 242 3 is_stmt 1 view .LVU283
 242:Core/Src/main.c **** 
 890              		.loc 1 242 36 is_stmt 0 view .LVU284
 891 0054 0B93     		str	r3, [sp, #44]
 244:Core/Src/main.c ****   {
 892              		.loc 1 244 3 is_stmt 1 view .LVU285
 244:Core/Src/main.c ****   {
 893              		.loc 1 244 7 is_stmt 0 view .LVU286
 894 0056 0121     		movs	r1, #1
 895 0058 07A8     		add	r0, sp, #28
 896 005a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 897              	.LVL39:
 244:Core/Src/main.c ****   {
 898              		.loc 1 244 6 view .LVU287
 899 005e 70B9     		cbnz	r0, .L63
 248:Core/Src/main.c ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 900              		.loc 1 248 3 is_stmt 1 view .LVU288
 248:Core/Src/main.c ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 901              		.loc 1 248 38 is_stmt 0 view .LVU289
 902 0060 4FF48153 		mov	r3, #4128
 903 0064 0193     		str	r3, [sp, #4]
 249:Core/Src/main.c ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 904              		.loc 1 249 3 is_stmt 1 view .LVU290
 249:Core/Src/main.c ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 905              		.loc 1 249 36 is_stmt 0 view .LVU291
 906 0066 0023     		movs	r3, #0
 907 0068 0493     		str	r3, [sp, #16]
 250:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 908              		.loc 1 250 3 is_stmt 1 view .LVU292
 250:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 909              		.loc 1 250 36 is_stmt 0 view .LVU293
ARM GAS  /tmp/cc0SAFfQ.s 			page 33


 910 006a 0693     		str	r3, [sp, #24]
 251:Core/Src/main.c ****   {
 911              		.loc 1 251 3 is_stmt 1 view .LVU294
 251:Core/Src/main.c ****   {
 912              		.loc 1 251 7 is_stmt 0 view .LVU295
 913 006c 01A8     		add	r0, sp, #4
 914 006e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 915              	.LVL40:
 251:Core/Src/main.c ****   {
 916              		.loc 1 251 6 view .LVU296
 917 0072 30B9     		cbnz	r0, .L64
 255:Core/Src/main.c **** 
 918              		.loc 1 255 1 view .LVU297
 919 0074 17B0     		add	sp, sp, #92
 920              	.LCFI16:
 921              		.cfi_remember_state
 922              		.cfi_def_cfa_offset 4
 923              		@ sp needed
 924 0076 5DF804FB 		ldr	pc, [sp], #4
 925              	.L62:
 926              	.LCFI17:
 927              		.cfi_restore_state
 233:Core/Src/main.c ****   }
 928              		.loc 1 233 5 is_stmt 1 view .LVU298
 929 007a FFF7FEFF 		bl	Error_Handler
 930              	.LVL41:
 931              	.L63:
 246:Core/Src/main.c ****   }
 932              		.loc 1 246 5 view .LVU299
 933 007e FFF7FEFF 		bl	Error_Handler
 934              	.LVL42:
 935              	.L64:
 253:Core/Src/main.c ****   }
 936              		.loc 1 253 5 view .LVU300
 937 0082 FFF7FEFF 		bl	Error_Handler
 938              	.LVL43:
 939              		.cfi_endproc
 940              	.LFE124:
 942              		.section	.text.main,"ax",%progbits
 943              		.align	1
 944              		.global	main
 945              		.syntax unified
 946              		.thumb
 947              		.thumb_func
 949              	main:
 950              	.LFB123:
  87:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 951              		.loc 1 87 1 view -0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 264
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 955 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 956              	.LCFI18:
 957              		.cfi_def_cfa_offset 28
 958              		.cfi_offset 4, -28
 959              		.cfi_offset 5, -24
 960              		.cfi_offset 6, -20
ARM GAS  /tmp/cc0SAFfQ.s 			page 34


 961              		.cfi_offset 7, -16
 962              		.cfi_offset 8, -12
 963              		.cfi_offset 9, -8
 964              		.cfi_offset 14, -4
 965 0004 2DED048B 		vpush.64	{d8, d9}
 966              	.LCFI19:
 967              		.cfi_def_cfa_offset 44
 968              		.cfi_offset 80, -44
 969              		.cfi_offset 81, -40
 970              		.cfi_offset 82, -36
 971              		.cfi_offset 83, -32
 972 0008 C5B0     		sub	sp, sp, #276
 973              	.LCFI20:
 974              		.cfi_def_cfa_offset 320
  89:Core/Src/main.c **** 	volatile HAL_StatusTypeDef stat;
 975              		.loc 1 89 2 view .LVU302
 976              	.LVL44:
  90:Core/Src/main.c **** 
 977              		.loc 1 90 2 view .LVU303
  97:Core/Src/main.c **** 
 978              		.loc 1 97 3 view .LVU304
 979 000a FFF7FEFF 		bl	HAL_Init
 980              	.LVL45:
 105:Core/Src/main.c **** 
 981              		.loc 1 105 3 view .LVU305
 982 000e FFF7FEFF 		bl	SystemClock_Config
 983              	.LVL46:
 112:Core/Src/main.c ****   MX_TIM1_Init();
 984              		.loc 1 112 3 view .LVU306
 985 0012 FFF7FEFF 		bl	MX_GPIO_Init
 986              	.LVL47:
 113:Core/Src/main.c ****   MX_I2C1_Init();
 987              		.loc 1 113 3 view .LVU307
 988 0016 FFF7FEFF 		bl	MX_TIM1_Init
 989              	.LVL48:
 114:Core/Src/main.c ****   MX_USART2_UART_Init();
 990              		.loc 1 114 3 view .LVU308
 991 001a FFF7FEFF 		bl	MX_I2C1_Init
 992              	.LVL49:
 115:Core/Src/main.c ****   MX_DMA_Init();
 993              		.loc 1 115 3 view .LVU309
 994 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 995              	.LVL50:
 116:Core/Src/main.c ****   MX_SPI1_Init();
 996              		.loc 1 116 3 view .LVU310
 997 0022 FFF7FEFF 		bl	MX_DMA_Init
 998              	.LVL51:
 117:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 999              		.loc 1 117 3 view .LVU311
 1000 0026 FFF7FEFF 		bl	MX_SPI1_Init
 1001              	.LVL52:
 129:Core/Src/main.c ****   /*while (bno055_convert_double_euler_hpr_deg(&orientation_data) != BNO055_SUCCESS) {
 1002              		.loc 1 129 3 view .LVU312
 142:Core/Src/main.c ****   float Kip = 0;
 1003              		.loc 1 142 3 view .LVU313
 143:Core/Src/main.c ****   float Kdp = 55;
 1004              		.loc 1 143 3 view .LVU314
ARM GAS  /tmp/cc0SAFfQ.s 			page 35


 144:Core/Src/main.c **** 
 1005              		.loc 1 144 3 view .LVU315
 146:Core/Src/main.c ****   float Kir = 0;
 1006              		.loc 1 146 3 view .LVU316
 147:Core/Src/main.c ****   float Kdr = 80;
 1007              		.loc 1 147 3 view .LVU317
 148:Core/Src/main.c ****   PID_TypeDef xPID;
 1008              		.loc 1 148 3 view .LVU318
 149:Core/Src/main.c ****   PID_TypeDef yPID;
 1009              		.loc 1 149 3 view .LVU319
 150:Core/Src/main.c **** 
 1010              		.loc 1 150 3 view .LVU320
 152:Core/Src/main.c ****   xSetpoint = orientation_data.p;
 1011              		.loc 1 152 3 view .LVU321
 153:Core/Src/main.c ****   ySetpoint = orientation_data.r;
 1012              		.loc 1 153 3 view .LVU322
 153:Core/Src/main.c ****   ySetpoint = orientation_data.r;
 1013              		.loc 1 153 13 is_stmt 0 view .LVU323
 1014 002a DDE94223 		ldrd	r2, [sp, #264]
 1015 002e CDE90423 		strd	r2, [sp, #16]
 154:Core/Src/main.c **** 
 1016              		.loc 1 154 3 is_stmt 1 view .LVU324
 154:Core/Src/main.c **** 
 1017              		.loc 1 154 31 is_stmt 0 view .LVU325
 1018 0032 DDE94023 		ldrd	r2, [sp, #256]
 154:Core/Src/main.c **** 
 1019              		.loc 1 154 13 view .LVU326
 1020 0036 CDE90223 		strd	r2, [sp, #8]
 156:Core/Src/main.c ****   PID_SetMode(&xPID, _PID_MODE_AUTOMATIC);
 1021              		.loc 1 156 3 is_stmt 1 view .LVU327
 1022 003a 9FED4B9B 		vldr.64	d9, .L71
 1023 003e 4FF00009 		mov	r9, #0
 1024 0042 CDF80490 		str	r9, [sp, #4]
 1025 0046 4FF00108 		mov	r8, #1
 1026 004a CDF80080 		str	r8, [sp]
 1027 004e 9FED482B 		vldr.64	d2, .L71+8
 1028 0052 B0EE491A 		vmov.f32	s2, s18
 1029 0056 F0EE691A 		vmov.f32	s3, s19
 1030 005a 9FED470B 		vldr.64	d0, .L71+16
 1031 005e 04AB     		add	r3, sp, #16
 1032 0060 514A     		ldr	r2, .L71+64
 1033 0062 42A9     		add	r1, sp, #264
 1034 0064 22A8     		add	r0, sp, #136
 1035 0066 FFF7FEFF 		bl	PID
 1036              	.LVL53:
 157:Core/Src/main.c ****   PID_SetSampleTime(&xPID, 10);
 1037              		.loc 1 157 3 view .LVU328
 1038 006a 4146     		mov	r1, r8
 1039 006c 22A8     		add	r0, sp, #136
 1040 006e FFF7FEFF 		bl	PID_SetMode
 1041              	.LVL54:
 158:Core/Src/main.c ****   PID_SetOutputLimits(&xPID, -10922.5, 10992.5);
 1042              		.loc 1 158 3 view .LVU329
 1043 0072 0A21     		movs	r1, #10
 1044 0074 22A8     		add	r0, sp, #136
 1045 0076 FFF7FEFF 		bl	PID_SetSampleTime
 1046              	.LVL55:
ARM GAS  /tmp/cc0SAFfQ.s 			page 36


 159:Core/Src/main.c **** 
 1047              		.loc 1 159 3 view .LVU330
 1048 007a 9FED418B 		vldr.64	d8, .L71+24
 1049 007e 9FED421B 		vldr.64	d1, .L71+32
 1050 0082 B0EE480A 		vmov.f32	s0, s16
 1051 0086 F0EE680A 		vmov.f32	s1, s17
 1052 008a 22A8     		add	r0, sp, #136
 1053 008c FFF7FEFF 		bl	PID_SetOutputLimits
 1054              	.LVL56:
 161:Core/Src/main.c ****   PID_SetMode(&yPID, _PID_MODE_AUTOMATIC);
 1055              		.loc 1 161 3 view .LVU331
 1056 0090 CDF80490 		str	r9, [sp, #4]
 1057 0094 CDF80080 		str	r8, [sp]
 1058 0098 9FED3D2B 		vldr.64	d2, .L71+40
 1059 009c B0EE491A 		vmov.f32	s2, s18
 1060 00a0 F0EE691A 		vmov.f32	s3, s19
 1061 00a4 9FED3C0B 		vldr.64	d0, .L71+48
 1062 00a8 02AB     		add	r3, sp, #8
 1063 00aa 404A     		ldr	r2, .L71+68
 1064 00ac 40A9     		add	r1, sp, #256
 1065 00ae 06A8     		add	r0, sp, #24
 1066 00b0 FFF7FEFF 		bl	PID
 1067              	.LVL57:
 162:Core/Src/main.c ****   PID_SetSampleTime(&yPID, 10);
 1068              		.loc 1 162 3 view .LVU332
 1069 00b4 4146     		mov	r1, r8
 1070 00b6 06A8     		add	r0, sp, #24
 1071 00b8 FFF7FEFF 		bl	PID_SetMode
 1072              	.LVL58:
 163:Core/Src/main.c ****   PID_SetOutputLimits(&yPID, -10922.5, 10922.5);
 1073              		.loc 1 163 3 view .LVU333
 1074 00bc 0A21     		movs	r1, #10
 1075 00be 06A8     		add	r0, sp, #24
 1076 00c0 FFF7FEFF 		bl	PID_SetSampleTime
 1077              	.LVL59:
 164:Core/Src/main.c **** 
 1078              		.loc 1 164 3 view .LVU334
 1079 00c4 9FED361B 		vldr.64	d1, .L71+56
 1080 00c8 B0EE480A 		vmov.f32	s0, s16
 1081 00cc F0EE680A 		vmov.f32	s1, s17
 1082 00d0 06A8     		add	r0, sp, #24
 1083 00d2 FFF7FEFF 		bl	PID_SetOutputLimits
 1084              	.LVL60:
 166:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 1085              		.loc 1 166 3 view .LVU335
 1086 00d6 DFF8E880 		ldr	r8, .L71+88
 1087 00da 4046     		mov	r0, r8
 1088 00dc FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1089              	.LVL61:
 167:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 1090              		.loc 1 167 3 view .LVU336
 1091 00e0 4946     		mov	r1, r9
 1092 00e2 4046     		mov	r0, r8
 1093 00e4 FFF7FEFF 		bl	HAL_TIM_OC_Start_IT
 1094              	.LVL62:
 168:Core/Src/main.c ****   HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
 1095              		.loc 1 168 3 view .LVU337
ARM GAS  /tmp/cc0SAFfQ.s 			page 37


 1096 00e8 0421     		movs	r1, #4
 1097 00ea 4046     		mov	r0, r8
 1098 00ec FFF7FEFF 		bl	HAL_TIM_OC_Start_IT
 1099              	.LVL63:
 169:Core/Src/main.c ****   //HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 1100              		.loc 1 169 3 view .LVU338
 1101 00f0 0821     		movs	r1, #8
 1102 00f2 4046     		mov	r0, r8
 1103 00f4 FFF7FEFF 		bl	HAL_TIM_OC_Start_IT
 1104              	.LVL64:
 172:Core/Src/main.c ****   while (HAL_GetTick() - t < 3000) {
 1105              		.loc 1 172 3 view .LVU339
 172:Core/Src/main.c ****   while (HAL_GetTick() - t < 3000) {
 1106              		.loc 1 172 7 is_stmt 0 view .LVU340
 1107 00f8 FFF7FEFF 		bl	HAL_GetTick
 1108              	.LVL65:
 1109 00fc 8046     		mov	r8, r0
 1110              	.LVL66:
 173:Core/Src/main.c **** 
 1111              		.loc 1 173 3 is_stmt 1 view .LVU341
 1112              	.L66:
 175:Core/Src/main.c ****   for (int i = 0; i < 20; i++) {
 1113              		.loc 1 175 3 discriminator 1 view .LVU342
 173:Core/Src/main.c **** 
 1114              		.loc 1 173 28 discriminator 1 view .LVU343
 173:Core/Src/main.c **** 
 1115              		.loc 1 173 10 is_stmt 0 discriminator 1 view .LVU344
 1116 00fe FFF7FEFF 		bl	HAL_GetTick
 1117              	.LVL67:
 173:Core/Src/main.c **** 
 1118              		.loc 1 173 24 discriminator 1 view .LVU345
 1119 0102 A0EB0800 		sub	r0, r0, r8
 173:Core/Src/main.c **** 
 1120              		.loc 1 173 28 discriminator 1 view .LVU346
 1121 0106 40F6B733 		movw	r3, #2999
 1122 010a 9842     		cmp	r0, r3
 1123 010c F7D9     		bls	.L66
 1124              	.LBB9:
 176:Core/Src/main.c ****     serial_input[i] = 0x00;
 1125              		.loc 1 176 12 view .LVU347
 1126 010e 0023     		movs	r3, #0
 1127 0110 03E0     		b	.L67
 1128              	.LVL68:
 1129              	.L68:
 177:Core/Src/main.c ****   }
 1130              		.loc 1 177 5 is_stmt 1 discriminator 3 view .LVU348
 177:Core/Src/main.c ****   }
 1131              		.loc 1 177 21 is_stmt 0 discriminator 3 view .LVU349
 1132 0112 274A     		ldr	r2, .L71+72
 1133 0114 0021     		movs	r1, #0
 1134 0116 D154     		strb	r1, [r2, r3]
 176:Core/Src/main.c ****     serial_input[i] = 0x00;
 1135              		.loc 1 176 28 is_stmt 1 discriminator 3 view .LVU350
 1136 0118 0133     		adds	r3, r3, #1
 1137              	.LVL69:
 1138              	.L67:
 176:Core/Src/main.c ****     serial_input[i] = 0x00;
ARM GAS  /tmp/cc0SAFfQ.s 			page 38


 1139              		.loc 1 176 21 discriminator 1 view .LVU351
 1140 011a 132B     		cmp	r3, #19
 1141 011c F9DD     		ble	.L68
 1142              	.LBE9:
 179:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, serial_input, 10);
 1143              		.loc 1 179 3 view .LVU352
 179:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, serial_input, 10);
 1144              		.loc 1 179 13 is_stmt 0 view .LVU353
 1145 011e 254B     		ldr	r3, .L71+76
 1146              	.LVL70:
 179:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, serial_input, 10);
 1147              		.loc 1 179 13 view .LVU354
 1148 0120 7222     		movs	r2, #114
 1149 0122 1A80     		strh	r2, [r3]	@ movhi
 180:Core/Src/main.c ****   //HAL_UART_Receive_DMA(&huart2, serial_input, 1);
 1150              		.loc 1 180 3 is_stmt 1 view .LVU355
 1151 0124 0A22     		movs	r2, #10
 1152 0126 2249     		ldr	r1, .L71+72
 1153 0128 2348     		ldr	r0, .L71+80
 1154 012a FFF7FEFF 		bl	HAL_UART_Receive_IT
 1155              	.LVL71:
 1156              	.L69:
 187:Core/Src/main.c ****   {
 1157              		.loc 1 187 3 discriminator 1 view .LVU356
 1158              	.LBB10:
 192:Core/Src/main.c **** 	  orientation_data.p = -fabs(orientation_data.p); // Fix pitch orientation
 1159              		.loc 1 192 5 discriminator 1 view .LVU357
 192:Core/Src/main.c **** 	  orientation_data.p = -fabs(orientation_data.p); // Fix pitch orientation
 1160              		.loc 1 192 15 is_stmt 0 discriminator 1 view .LVU358
 1161 012e 2048     		ldr	r0, .L71+72
 1162 0130 FFF7FEFF 		bl	atoi
 1163              	.LVL72:
 192:Core/Src/main.c **** 	  orientation_data.p = -fabs(orientation_data.p); // Fix pitch orientation
 1164              		.loc 1 192 13 discriminator 1 view .LVU359
 1165 0134 214B     		ldr	r3, .L71+84
 1166 0136 1860     		str	r0, [r3]
 193:Core/Src/main.c **** 
 1167              		.loc 1 193 4 is_stmt 1 discriminator 1 view .LVU360
 193:Core/Src/main.c **** 
 1168              		.loc 1 193 47 is_stmt 0 discriminator 1 view .LVU361
 1169 0138 DDE94223 		ldrd	r2, [sp, #264]
 193:Core/Src/main.c **** 
 1170              		.loc 1 193 26 discriminator 1 view .LVU362
 1171 013c 23F00045 		bic	r5, r3, #-2147483648
 193:Core/Src/main.c **** 
 1172              		.loc 1 193 25 discriminator 1 view .LVU363
 1173 0140 1646     		mov	r6, r2
 1174 0142 05F10047 		add	r7, r5, #-2147483648
 193:Core/Src/main.c **** 
 1175              		.loc 1 193 23 discriminator 1 view .LVU364
 1176 0146 CDE94267 		strd	r6, [sp, #264]
 195:Core/Src/main.c **** 	  PID_Compute(&xPID);
 1177              		.loc 1 195 4 is_stmt 1 discriminator 1 view .LVU365
 1178 014a 1920     		movs	r0, #25
 1179 014c FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1180              	.LVL73:
 196:Core/Src/main.c **** 	  PID_Compute(&yPID);
ARM GAS  /tmp/cc0SAFfQ.s 			page 39


 1181              		.loc 1 196 4 discriminator 1 view .LVU366
 1182 0150 22A8     		add	r0, sp, #136
 1183 0152 FFF7FEFF 		bl	PID_Compute
 1184              	.LVL74:
 197:Core/Src/main.c **** 	  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 1185              		.loc 1 197 4 discriminator 1 view .LVU367
 1186 0156 06A8     		add	r0, sp, #24
 1187 0158 FFF7FEFF 		bl	PID_Compute
 1188              	.LVL75:
 198:Core/Src/main.c ****     
 1189              		.loc 1 198 4 discriminator 1 view .LVU368
 1190 015c 1920     		movs	r0, #25
 1191 015e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1192              	.LVL76:
 1193              	.LBE10:
 187:Core/Src/main.c ****   {
 1194              		.loc 1 187 9 discriminator 1 view .LVU369
 1195 0162 E4E7     		b	.L69
 1196              	.L72:
 1197 0164 AFF30080 		.align	3
 1198              	.L71:
 1199 0168 00000000 		.word	0
 1200 016c 00000000 		.word	0
 1201 0170 00000000 		.word	0
 1202 0174 00804B40 		.word	1078689792
 1203 0178 00000000 		.word	0
 1204 017c 00805B40 		.word	1079738368
 1205 0180 00000000 		.word	0
 1206 0184 4055C5C0 		.word	-1060809408
 1207 0188 00000000 		.word	0
 1208 018c 4078C540 		.word	1086683200
 1209 0190 00000000 		.word	0
 1210 0194 00005440 		.word	1079246848
 1211 0198 00000000 		.word	0
 1212 019c 00006440 		.word	1080295424
 1213 01a0 00000000 		.word	0
 1214 01a4 4055C540 		.word	1086674240
 1215 01a8 00000000 		.word	.LANCHOR5
 1216 01ac 00000000 		.word	.LANCHOR6
 1217 01b0 00000000 		.word	.LANCHOR0
 1218 01b4 00000000 		.word	.LANCHOR7
 1219 01b8 00000000 		.word	.LANCHOR1
 1220 01bc 00000000 		.word	.LANCHOR8
 1221 01c0 00000000 		.word	.LANCHOR2
 1222              		.cfi_endproc
 1223              	.LFE123:
 1225              		.global	serial_input
 1226              		.global	yout
 1227              		.global	xout
 1228              		.global	esc_rpm
 1229              		.global	esc_speed
 1230              		.global	adc_value
 1231              		.global	flag
 1232              		.global	imu
 1233              		.global	ret
 1234              		.global	buf
 1235              		.global	hdma_usart2_rx
ARM GAS  /tmp/cc0SAFfQ.s 			page 40


 1236              		.global	huart2
 1237              		.global	htim1
 1238              		.global	hspi1
 1239              		.global	hi2c1
 1240              		.section	.bss.adc_value,"aw",%nobits
 1241              		.align	2
 1244              	adc_value:
 1245 0000 00000000 		.space	4
 1246              		.section	.bss.buf,"aw",%nobits
 1247              		.align	2
 1250              	buf:
 1251 0000 000000   		.space	3
 1252              		.section	.bss.esc_rpm,"aw",%nobits
 1253              		.align	2
 1254              		.set	.LANCHOR8,. + 0
 1257              	esc_rpm:
 1258 0000 00000000 		.space	4
 1259              		.section	.bss.esc_speed,"aw",%nobits
 1260              		.align	1
 1261              		.set	.LANCHOR7,. + 0
 1264              	esc_speed:
 1265 0000 0000     		.space	2
 1266              		.section	.bss.flag,"aw",%nobits
 1269              	flag:
 1270 0000 00       		.space	1
 1271              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 1272              		.align	2
 1275              	hdma_usart2_rx:
 1276 0000 00000000 		.space	68
 1276      00000000 
 1276      00000000 
 1276      00000000 
 1276      00000000 
 1277              		.section	.bss.hi2c1,"aw",%nobits
 1278              		.align	2
 1279              		.set	.LANCHOR3,. + 0
 1282              	hi2c1:
 1283 0000 00000000 		.space	76
 1283      00000000 
 1283      00000000 
 1283      00000000 
 1283      00000000 
 1284              		.section	.bss.hspi1,"aw",%nobits
 1285              		.align	2
 1286              		.set	.LANCHOR4,. + 0
 1289              	hspi1:
 1290 0000 00000000 		.space	100
 1290      00000000 
 1290      00000000 
 1290      00000000 
 1290      00000000 
 1291              		.section	.bss.htim1,"aw",%nobits
 1292              		.align	2
 1293              		.set	.LANCHOR2,. + 0
 1296              	htim1:
 1297 0000 00000000 		.space	76
 1297      00000000 
ARM GAS  /tmp/cc0SAFfQ.s 			page 41


 1297      00000000 
 1297      00000000 
 1297      00000000 
 1298              		.section	.bss.huart2,"aw",%nobits
 1299              		.align	2
 1300              		.set	.LANCHOR1,. + 0
 1303              	huart2:
 1304 0000 00000000 		.space	132
 1304      00000000 
 1304      00000000 
 1304      00000000 
 1304      00000000 
 1305              		.section	.bss.imu,"aw",%nobits
 1306              		.align	2
 1309              	imu:
 1310 0000 00000000 		.space	24
 1310      00000000 
 1310      00000000 
 1310      00000000 
 1310      00000000 
 1311              		.section	.bss.ret,"aw",%nobits
 1314              	ret:
 1315 0000 00       		.space	1
 1316              		.section	.bss.serial_input,"aw",%nobits
 1317              		.align	2
 1318              		.set	.LANCHOR0,. + 0
 1321              	serial_input:
 1322 0000 00000000 		.space	20
 1322      00000000 
 1322      00000000 
 1322      00000000 
 1322      00000000 
 1323              		.section	.bss.xout,"aw",%nobits
 1324              		.align	3
 1325              		.set	.LANCHOR5,. + 0
 1328              	xout:
 1329 0000 00000000 		.space	8
 1329      00000000 
 1330              		.section	.bss.yout,"aw",%nobits
 1331              		.align	3
 1332              		.set	.LANCHOR6,. + 0
 1335              	yout:
 1336 0000 00000000 		.space	8
 1336      00000000 
 1337              		.text
 1338              	.Letext0:
 1339              		.file 3 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 1340              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1341              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1342              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1343              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 1344              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 1345              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 1346              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1347              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 1348              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
 1349              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
ARM GAS  /tmp/cc0SAFfQ.s 			page 42


 1350              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1351              		.file 15 "Core/Inc/bno055.h"
 1352              		.file 16 "Core/Inc/pid.h"
 1353              		.file 17 "Core/Inc/main.h"
 1354              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h"
 1355              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 1356              		.file 20 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 1357              		.file 21 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 1358              		.file 22 "<built-in>"
ARM GAS  /tmp/cc0SAFfQ.s 			page 43


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc0SAFfQ.s:20     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc0SAFfQ.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc0SAFfQ.s:120    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc0SAFfQ.s:125    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc0SAFfQ.s:173    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc0SAFfQ.s:178    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc0SAFfQ.s:184    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc0SAFfQ.s:210    .text.HAL_UART_RxCpltCallback:0000000000000010 $d
     /tmp/cc0SAFfQ.s:216    .text.Error_Handler:0000000000000000 $t
     /tmp/cc0SAFfQ.s:222    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc0SAFfQ.s:254    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/cc0SAFfQ.s:259    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/cc0SAFfQ.s:539    .text.MX_TIM1_Init:0000000000000128 $d
     /tmp/cc0SAFfQ.s:545    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/cc0SAFfQ.s:550    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/cc0SAFfQ.s:632    .text.MX_I2C1_Init:0000000000000048 $d
     /tmp/cc0SAFfQ.s:639    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc0SAFfQ.s:644    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc0SAFfQ.s:710    .text.MX_USART2_UART_Init:0000000000000038 $d
     /tmp/cc0SAFfQ.s:716    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cc0SAFfQ.s:721    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cc0SAFfQ.s:798    .text.MX_SPI1_Init:0000000000000044 $d
     /tmp/cc0SAFfQ.s:804    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc0SAFfQ.s:810    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc0SAFfQ.s:943    .text.main:0000000000000000 $t
     /tmp/cc0SAFfQ.s:949    .text.main:0000000000000000 main
     /tmp/cc0SAFfQ.s:1199   .text.main:0000000000000168 $d
     /tmp/cc0SAFfQ.s:1321   .bss.serial_input:0000000000000000 serial_input
     /tmp/cc0SAFfQ.s:1335   .bss.yout:0000000000000000 yout
     /tmp/cc0SAFfQ.s:1328   .bss.xout:0000000000000000 xout
     /tmp/cc0SAFfQ.s:1257   .bss.esc_rpm:0000000000000000 esc_rpm
     /tmp/cc0SAFfQ.s:1264   .bss.esc_speed:0000000000000000 esc_speed
     /tmp/cc0SAFfQ.s:1244   .bss.adc_value:0000000000000000 adc_value
     /tmp/cc0SAFfQ.s:1269   .bss.flag:0000000000000000 flag
     /tmp/cc0SAFfQ.s:1309   .bss.imu:0000000000000000 imu
     /tmp/cc0SAFfQ.s:1314   .bss.ret:0000000000000000 ret
     /tmp/cc0SAFfQ.s:1250   .bss.buf:0000000000000000 buf
     /tmp/cc0SAFfQ.s:1275   .bss.hdma_usart2_rx:0000000000000000 hdma_usart2_rx
     /tmp/cc0SAFfQ.s:1303   .bss.huart2:0000000000000000 huart2
     /tmp/cc0SAFfQ.s:1296   .bss.htim1:0000000000000000 htim1
     /tmp/cc0SAFfQ.s:1289   .bss.hspi1:0000000000000000 hspi1
     /tmp/cc0SAFfQ.s:1282   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/cc0SAFfQ.s:1241   .bss.adc_value:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1247   .bss.buf:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1253   .bss.esc_rpm:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1260   .bss.esc_speed:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1270   .bss.flag:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1272   .bss.hdma_usart2_rx:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1278   .bss.hi2c1:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1285   .bss.hspi1:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1292   .bss.htim1:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1299   .bss.huart2:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1306   .bss.imu:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1315   .bss.ret:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1317   .bss.serial_input:0000000000000000 $d
ARM GAS  /tmp/cc0SAFfQ.s 			page 44


     /tmp/cc0SAFfQ.s:1324   .bss.xout:0000000000000000 $d
     /tmp/cc0SAFfQ.s:1331   .bss.yout:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Receive_IT
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_UART_Init
HAL_SPI_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
PID
PID_SetMode
PID_SetSampleTime
PID_SetOutputLimits
HAL_TIM_Base_Start_IT
HAL_TIM_OC_Start_IT
HAL_GetTick
atoi
HAL_NVIC_DisableIRQ
PID_Compute
